
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004048  080081b0  080081b0  000081b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800c1f8  0800c1f8  0000c1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c314  0800c314  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c314  0800c314  0000c314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c31c  0800c31c  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c31c  0800c31c  0000c31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c320  0800c320  0000c320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c324  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  0800c394  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  0800c394  00010128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b27e  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001965  00000000  00000000  0001b31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0001cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0001d628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029047  00000000  00000000  0001df20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5fe  00000000  00000000  00046f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8ff9  00000000  00000000  00052565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b55e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e20  00000000  00000000  0014b5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081b0 <__do_global_dtors_aux>:
 80081b0:	b510      	push	{r4, lr}
 80081b2:	4c05      	ldr	r4, [pc, #20]	; (80081c8 <__do_global_dtors_aux+0x18>)
 80081b4:	7823      	ldrb	r3, [r4, #0]
 80081b6:	b933      	cbnz	r3, 80081c6 <__do_global_dtors_aux+0x16>
 80081b8:	4b04      	ldr	r3, [pc, #16]	; (80081cc <__do_global_dtors_aux+0x1c>)
 80081ba:	b113      	cbz	r3, 80081c2 <__do_global_dtors_aux+0x12>
 80081bc:	4804      	ldr	r0, [pc, #16]	; (80081d0 <__do_global_dtors_aux+0x20>)
 80081be:	f3af 8000 	nop.w
 80081c2:	2301      	movs	r3, #1
 80081c4:	7023      	strb	r3, [r4, #0]
 80081c6:	bd10      	pop	{r4, pc}
 80081c8:	20000070 	.word	0x20000070
 80081cc:	00000000 	.word	0x00000000
 80081d0:	0800c1e0 	.word	0x0800c1e0

080081d4 <frame_dummy>:
 80081d4:	b508      	push	{r3, lr}
 80081d6:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <frame_dummy+0x10>)
 80081d8:	b11b      	cbz	r3, 80081e2 <frame_dummy+0xe>
 80081da:	4903      	ldr	r1, [pc, #12]	; (80081e8 <frame_dummy+0x14>)
 80081dc:	4803      	ldr	r0, [pc, #12]	; (80081ec <frame_dummy+0x18>)
 80081de:	f3af 8000 	nop.w
 80081e2:	bd08      	pop	{r3, pc}
 80081e4:	00000000 	.word	0x00000000
 80081e8:	20000074 	.word	0x20000074
 80081ec:	0800c1e0 	.word	0x0800c1e0

080081f0 <memchr>:
 80081f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081f4:	2a10      	cmp	r2, #16
 80081f6:	db2b      	blt.n	8008250 <memchr+0x60>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	d008      	beq.n	8008210 <memchr+0x20>
 80081fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008202:	3a01      	subs	r2, #1
 8008204:	428b      	cmp	r3, r1
 8008206:	d02d      	beq.n	8008264 <memchr+0x74>
 8008208:	f010 0f07 	tst.w	r0, #7
 800820c:	b342      	cbz	r2, 8008260 <memchr+0x70>
 800820e:	d1f6      	bne.n	80081fe <memchr+0xe>
 8008210:	b4f0      	push	{r4, r5, r6, r7}
 8008212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800821a:	f022 0407 	bic.w	r4, r2, #7
 800821e:	f07f 0700 	mvns.w	r7, #0
 8008222:	2300      	movs	r3, #0
 8008224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008228:	3c08      	subs	r4, #8
 800822a:	ea85 0501 	eor.w	r5, r5, r1
 800822e:	ea86 0601 	eor.w	r6, r6, r1
 8008232:	fa85 f547 	uadd8	r5, r5, r7
 8008236:	faa3 f587 	sel	r5, r3, r7
 800823a:	fa86 f647 	uadd8	r6, r6, r7
 800823e:	faa5 f687 	sel	r6, r5, r7
 8008242:	b98e      	cbnz	r6, 8008268 <memchr+0x78>
 8008244:	d1ee      	bne.n	8008224 <memchr+0x34>
 8008246:	bcf0      	pop	{r4, r5, r6, r7}
 8008248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800824c:	f002 0207 	and.w	r2, r2, #7
 8008250:	b132      	cbz	r2, 8008260 <memchr+0x70>
 8008252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008256:	3a01      	subs	r2, #1
 8008258:	ea83 0301 	eor.w	r3, r3, r1
 800825c:	b113      	cbz	r3, 8008264 <memchr+0x74>
 800825e:	d1f8      	bne.n	8008252 <memchr+0x62>
 8008260:	2000      	movs	r0, #0
 8008262:	4770      	bx	lr
 8008264:	3801      	subs	r0, #1
 8008266:	4770      	bx	lr
 8008268:	2d00      	cmp	r5, #0
 800826a:	bf06      	itte	eq
 800826c:	4635      	moveq	r5, r6
 800826e:	3803      	subeq	r0, #3
 8008270:	3807      	subne	r0, #7
 8008272:	f015 0f01 	tst.w	r5, #1
 8008276:	d107      	bne.n	8008288 <memchr+0x98>
 8008278:	3001      	adds	r0, #1
 800827a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800827e:	bf02      	ittt	eq
 8008280:	3001      	addeq	r0, #1
 8008282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008286:	3001      	addeq	r0, #1
 8008288:	bcf0      	pop	{r4, r5, r6, r7}
 800828a:	3801      	subs	r0, #1
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop

08008290 <__aeabi_uldivmod>:
 8008290:	b953      	cbnz	r3, 80082a8 <__aeabi_uldivmod+0x18>
 8008292:	b94a      	cbnz	r2, 80082a8 <__aeabi_uldivmod+0x18>
 8008294:	2900      	cmp	r1, #0
 8008296:	bf08      	it	eq
 8008298:	2800      	cmpeq	r0, #0
 800829a:	bf1c      	itt	ne
 800829c:	f04f 31ff 	movne.w	r1, #4294967295
 80082a0:	f04f 30ff 	movne.w	r0, #4294967295
 80082a4:	f000 b974 	b.w	8008590 <__aeabi_idiv0>
 80082a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80082ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082b0:	f000 f806 	bl	80082c0 <__udivmoddi4>
 80082b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082bc:	b004      	add	sp, #16
 80082be:	4770      	bx	lr

080082c0 <__udivmoddi4>:
 80082c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c4:	9d08      	ldr	r5, [sp, #32]
 80082c6:	4604      	mov	r4, r0
 80082c8:	468e      	mov	lr, r1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d14d      	bne.n	800836a <__udivmoddi4+0xaa>
 80082ce:	428a      	cmp	r2, r1
 80082d0:	4694      	mov	ip, r2
 80082d2:	d969      	bls.n	80083a8 <__udivmoddi4+0xe8>
 80082d4:	fab2 f282 	clz	r2, r2
 80082d8:	b152      	cbz	r2, 80082f0 <__udivmoddi4+0x30>
 80082da:	fa01 f302 	lsl.w	r3, r1, r2
 80082de:	f1c2 0120 	rsb	r1, r2, #32
 80082e2:	fa20 f101 	lsr.w	r1, r0, r1
 80082e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80082ea:	ea41 0e03 	orr.w	lr, r1, r3
 80082ee:	4094      	lsls	r4, r2
 80082f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80082f4:	0c21      	lsrs	r1, r4, #16
 80082f6:	fbbe f6f8 	udiv	r6, lr, r8
 80082fa:	fa1f f78c 	uxth.w	r7, ip
 80082fe:	fb08 e316 	mls	r3, r8, r6, lr
 8008302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008306:	fb06 f107 	mul.w	r1, r6, r7
 800830a:	4299      	cmp	r1, r3
 800830c:	d90a      	bls.n	8008324 <__udivmoddi4+0x64>
 800830e:	eb1c 0303 	adds.w	r3, ip, r3
 8008312:	f106 30ff 	add.w	r0, r6, #4294967295
 8008316:	f080 811f 	bcs.w	8008558 <__udivmoddi4+0x298>
 800831a:	4299      	cmp	r1, r3
 800831c:	f240 811c 	bls.w	8008558 <__udivmoddi4+0x298>
 8008320:	3e02      	subs	r6, #2
 8008322:	4463      	add	r3, ip
 8008324:	1a5b      	subs	r3, r3, r1
 8008326:	b2a4      	uxth	r4, r4
 8008328:	fbb3 f0f8 	udiv	r0, r3, r8
 800832c:	fb08 3310 	mls	r3, r8, r0, r3
 8008330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008334:	fb00 f707 	mul.w	r7, r0, r7
 8008338:	42a7      	cmp	r7, r4
 800833a:	d90a      	bls.n	8008352 <__udivmoddi4+0x92>
 800833c:	eb1c 0404 	adds.w	r4, ip, r4
 8008340:	f100 33ff 	add.w	r3, r0, #4294967295
 8008344:	f080 810a 	bcs.w	800855c <__udivmoddi4+0x29c>
 8008348:	42a7      	cmp	r7, r4
 800834a:	f240 8107 	bls.w	800855c <__udivmoddi4+0x29c>
 800834e:	4464      	add	r4, ip
 8008350:	3802      	subs	r0, #2
 8008352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008356:	1be4      	subs	r4, r4, r7
 8008358:	2600      	movs	r6, #0
 800835a:	b11d      	cbz	r5, 8008364 <__udivmoddi4+0xa4>
 800835c:	40d4      	lsrs	r4, r2
 800835e:	2300      	movs	r3, #0
 8008360:	e9c5 4300 	strd	r4, r3, [r5]
 8008364:	4631      	mov	r1, r6
 8008366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836a:	428b      	cmp	r3, r1
 800836c:	d909      	bls.n	8008382 <__udivmoddi4+0xc2>
 800836e:	2d00      	cmp	r5, #0
 8008370:	f000 80ef 	beq.w	8008552 <__udivmoddi4+0x292>
 8008374:	2600      	movs	r6, #0
 8008376:	e9c5 0100 	strd	r0, r1, [r5]
 800837a:	4630      	mov	r0, r6
 800837c:	4631      	mov	r1, r6
 800837e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008382:	fab3 f683 	clz	r6, r3
 8008386:	2e00      	cmp	r6, #0
 8008388:	d14a      	bne.n	8008420 <__udivmoddi4+0x160>
 800838a:	428b      	cmp	r3, r1
 800838c:	d302      	bcc.n	8008394 <__udivmoddi4+0xd4>
 800838e:	4282      	cmp	r2, r0
 8008390:	f200 80f9 	bhi.w	8008586 <__udivmoddi4+0x2c6>
 8008394:	1a84      	subs	r4, r0, r2
 8008396:	eb61 0303 	sbc.w	r3, r1, r3
 800839a:	2001      	movs	r0, #1
 800839c:	469e      	mov	lr, r3
 800839e:	2d00      	cmp	r5, #0
 80083a0:	d0e0      	beq.n	8008364 <__udivmoddi4+0xa4>
 80083a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80083a6:	e7dd      	b.n	8008364 <__udivmoddi4+0xa4>
 80083a8:	b902      	cbnz	r2, 80083ac <__udivmoddi4+0xec>
 80083aa:	deff      	udf	#255	; 0xff
 80083ac:	fab2 f282 	clz	r2, r2
 80083b0:	2a00      	cmp	r2, #0
 80083b2:	f040 8092 	bne.w	80084da <__udivmoddi4+0x21a>
 80083b6:	eba1 010c 	sub.w	r1, r1, ip
 80083ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80083be:	fa1f fe8c 	uxth.w	lr, ip
 80083c2:	2601      	movs	r6, #1
 80083c4:	0c20      	lsrs	r0, r4, #16
 80083c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80083ca:	fb07 1113 	mls	r1, r7, r3, r1
 80083ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80083d2:	fb0e f003 	mul.w	r0, lr, r3
 80083d6:	4288      	cmp	r0, r1
 80083d8:	d908      	bls.n	80083ec <__udivmoddi4+0x12c>
 80083da:	eb1c 0101 	adds.w	r1, ip, r1
 80083de:	f103 38ff 	add.w	r8, r3, #4294967295
 80083e2:	d202      	bcs.n	80083ea <__udivmoddi4+0x12a>
 80083e4:	4288      	cmp	r0, r1
 80083e6:	f200 80cb 	bhi.w	8008580 <__udivmoddi4+0x2c0>
 80083ea:	4643      	mov	r3, r8
 80083ec:	1a09      	subs	r1, r1, r0
 80083ee:	b2a4      	uxth	r4, r4
 80083f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80083f4:	fb07 1110 	mls	r1, r7, r0, r1
 80083f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80083fc:	fb0e fe00 	mul.w	lr, lr, r0
 8008400:	45a6      	cmp	lr, r4
 8008402:	d908      	bls.n	8008416 <__udivmoddi4+0x156>
 8008404:	eb1c 0404 	adds.w	r4, ip, r4
 8008408:	f100 31ff 	add.w	r1, r0, #4294967295
 800840c:	d202      	bcs.n	8008414 <__udivmoddi4+0x154>
 800840e:	45a6      	cmp	lr, r4
 8008410:	f200 80bb 	bhi.w	800858a <__udivmoddi4+0x2ca>
 8008414:	4608      	mov	r0, r1
 8008416:	eba4 040e 	sub.w	r4, r4, lr
 800841a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800841e:	e79c      	b.n	800835a <__udivmoddi4+0x9a>
 8008420:	f1c6 0720 	rsb	r7, r6, #32
 8008424:	40b3      	lsls	r3, r6
 8008426:	fa22 fc07 	lsr.w	ip, r2, r7
 800842a:	ea4c 0c03 	orr.w	ip, ip, r3
 800842e:	fa20 f407 	lsr.w	r4, r0, r7
 8008432:	fa01 f306 	lsl.w	r3, r1, r6
 8008436:	431c      	orrs	r4, r3
 8008438:	40f9      	lsrs	r1, r7
 800843a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800843e:	fa00 f306 	lsl.w	r3, r0, r6
 8008442:	fbb1 f8f9 	udiv	r8, r1, r9
 8008446:	0c20      	lsrs	r0, r4, #16
 8008448:	fa1f fe8c 	uxth.w	lr, ip
 800844c:	fb09 1118 	mls	r1, r9, r8, r1
 8008450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008454:	fb08 f00e 	mul.w	r0, r8, lr
 8008458:	4288      	cmp	r0, r1
 800845a:	fa02 f206 	lsl.w	r2, r2, r6
 800845e:	d90b      	bls.n	8008478 <__udivmoddi4+0x1b8>
 8008460:	eb1c 0101 	adds.w	r1, ip, r1
 8008464:	f108 3aff 	add.w	sl, r8, #4294967295
 8008468:	f080 8088 	bcs.w	800857c <__udivmoddi4+0x2bc>
 800846c:	4288      	cmp	r0, r1
 800846e:	f240 8085 	bls.w	800857c <__udivmoddi4+0x2bc>
 8008472:	f1a8 0802 	sub.w	r8, r8, #2
 8008476:	4461      	add	r1, ip
 8008478:	1a09      	subs	r1, r1, r0
 800847a:	b2a4      	uxth	r4, r4
 800847c:	fbb1 f0f9 	udiv	r0, r1, r9
 8008480:	fb09 1110 	mls	r1, r9, r0, r1
 8008484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008488:	fb00 fe0e 	mul.w	lr, r0, lr
 800848c:	458e      	cmp	lr, r1
 800848e:	d908      	bls.n	80084a2 <__udivmoddi4+0x1e2>
 8008490:	eb1c 0101 	adds.w	r1, ip, r1
 8008494:	f100 34ff 	add.w	r4, r0, #4294967295
 8008498:	d26c      	bcs.n	8008574 <__udivmoddi4+0x2b4>
 800849a:	458e      	cmp	lr, r1
 800849c:	d96a      	bls.n	8008574 <__udivmoddi4+0x2b4>
 800849e:	3802      	subs	r0, #2
 80084a0:	4461      	add	r1, ip
 80084a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80084a6:	fba0 9402 	umull	r9, r4, r0, r2
 80084aa:	eba1 010e 	sub.w	r1, r1, lr
 80084ae:	42a1      	cmp	r1, r4
 80084b0:	46c8      	mov	r8, r9
 80084b2:	46a6      	mov	lr, r4
 80084b4:	d356      	bcc.n	8008564 <__udivmoddi4+0x2a4>
 80084b6:	d053      	beq.n	8008560 <__udivmoddi4+0x2a0>
 80084b8:	b15d      	cbz	r5, 80084d2 <__udivmoddi4+0x212>
 80084ba:	ebb3 0208 	subs.w	r2, r3, r8
 80084be:	eb61 010e 	sbc.w	r1, r1, lr
 80084c2:	fa01 f707 	lsl.w	r7, r1, r7
 80084c6:	fa22 f306 	lsr.w	r3, r2, r6
 80084ca:	40f1      	lsrs	r1, r6
 80084cc:	431f      	orrs	r7, r3
 80084ce:	e9c5 7100 	strd	r7, r1, [r5]
 80084d2:	2600      	movs	r6, #0
 80084d4:	4631      	mov	r1, r6
 80084d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084da:	f1c2 0320 	rsb	r3, r2, #32
 80084de:	40d8      	lsrs	r0, r3
 80084e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80084e4:	fa21 f303 	lsr.w	r3, r1, r3
 80084e8:	4091      	lsls	r1, r2
 80084ea:	4301      	orrs	r1, r0
 80084ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80084f0:	fa1f fe8c 	uxth.w	lr, ip
 80084f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80084f8:	fb07 3610 	mls	r6, r7, r0, r3
 80084fc:	0c0b      	lsrs	r3, r1, #16
 80084fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008502:	fb00 f60e 	mul.w	r6, r0, lr
 8008506:	429e      	cmp	r6, r3
 8008508:	fa04 f402 	lsl.w	r4, r4, r2
 800850c:	d908      	bls.n	8008520 <__udivmoddi4+0x260>
 800850e:	eb1c 0303 	adds.w	r3, ip, r3
 8008512:	f100 38ff 	add.w	r8, r0, #4294967295
 8008516:	d22f      	bcs.n	8008578 <__udivmoddi4+0x2b8>
 8008518:	429e      	cmp	r6, r3
 800851a:	d92d      	bls.n	8008578 <__udivmoddi4+0x2b8>
 800851c:	3802      	subs	r0, #2
 800851e:	4463      	add	r3, ip
 8008520:	1b9b      	subs	r3, r3, r6
 8008522:	b289      	uxth	r1, r1
 8008524:	fbb3 f6f7 	udiv	r6, r3, r7
 8008528:	fb07 3316 	mls	r3, r7, r6, r3
 800852c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008530:	fb06 f30e 	mul.w	r3, r6, lr
 8008534:	428b      	cmp	r3, r1
 8008536:	d908      	bls.n	800854a <__udivmoddi4+0x28a>
 8008538:	eb1c 0101 	adds.w	r1, ip, r1
 800853c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008540:	d216      	bcs.n	8008570 <__udivmoddi4+0x2b0>
 8008542:	428b      	cmp	r3, r1
 8008544:	d914      	bls.n	8008570 <__udivmoddi4+0x2b0>
 8008546:	3e02      	subs	r6, #2
 8008548:	4461      	add	r1, ip
 800854a:	1ac9      	subs	r1, r1, r3
 800854c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008550:	e738      	b.n	80083c4 <__udivmoddi4+0x104>
 8008552:	462e      	mov	r6, r5
 8008554:	4628      	mov	r0, r5
 8008556:	e705      	b.n	8008364 <__udivmoddi4+0xa4>
 8008558:	4606      	mov	r6, r0
 800855a:	e6e3      	b.n	8008324 <__udivmoddi4+0x64>
 800855c:	4618      	mov	r0, r3
 800855e:	e6f8      	b.n	8008352 <__udivmoddi4+0x92>
 8008560:	454b      	cmp	r3, r9
 8008562:	d2a9      	bcs.n	80084b8 <__udivmoddi4+0x1f8>
 8008564:	ebb9 0802 	subs.w	r8, r9, r2
 8008568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800856c:	3801      	subs	r0, #1
 800856e:	e7a3      	b.n	80084b8 <__udivmoddi4+0x1f8>
 8008570:	4646      	mov	r6, r8
 8008572:	e7ea      	b.n	800854a <__udivmoddi4+0x28a>
 8008574:	4620      	mov	r0, r4
 8008576:	e794      	b.n	80084a2 <__udivmoddi4+0x1e2>
 8008578:	4640      	mov	r0, r8
 800857a:	e7d1      	b.n	8008520 <__udivmoddi4+0x260>
 800857c:	46d0      	mov	r8, sl
 800857e:	e77b      	b.n	8008478 <__udivmoddi4+0x1b8>
 8008580:	3b02      	subs	r3, #2
 8008582:	4461      	add	r1, ip
 8008584:	e732      	b.n	80083ec <__udivmoddi4+0x12c>
 8008586:	4630      	mov	r0, r6
 8008588:	e709      	b.n	800839e <__udivmoddi4+0xde>
 800858a:	4464      	add	r4, ip
 800858c:	3802      	subs	r0, #2
 800858e:	e742      	b.n	8008416 <__udivmoddi4+0x156>

08008590 <__aeabi_idiv0>:
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop

08008594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008598:	f000 fa83 	bl	8008aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800859c:	f000 f826 	bl	80085ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085a0:	f000 f89a 	bl	80086d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80085a4:	f000 f868 	bl	8008678 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application %d\n",APP_VERSION[0]);
 80085a8:	2300      	movs	r3, #0
 80085aa:	4619      	mov	r1, r3
 80085ac:	480c      	ldr	r0, [pc, #48]	; (80085e0 <main+0x4c>)
 80085ae:	f002 fe89 	bl	800b2c4 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Blinking the application LED");
 80085b2:	480c      	ldr	r0, [pc, #48]	; (80085e4 <main+0x50>)
 80085b4:	f002 fe86 	bl	800b2c4 <iprintf>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80085b8:	2201      	movs	r2, #1
 80085ba:	2180      	movs	r1, #128	; 0x80
 80085bc:	480a      	ldr	r0, [pc, #40]	; (80085e8 <main+0x54>)
 80085be:	f000 fd81 	bl	80090c4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000); //1000ms delay
 80085c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085c6:	f000 fae1 	bl	8008b8c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80085ca:	2200      	movs	r2, #0
 80085cc:	2180      	movs	r1, #128	; 0x80
 80085ce:	4806      	ldr	r0, [pc, #24]	; (80085e8 <main+0x54>)
 80085d0:	f000 fd78 	bl	80090c4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000); //1000ms delay
 80085d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085d8:	f000 fad8 	bl	8008b8c <HAL_Delay>
	  printf("Blinking the application LED");
 80085dc:	e7e9      	b.n	80085b2 <main+0x1e>
 80085de:	bf00      	nop
 80085e0:	0800c1f8 	.word	0x0800c1f8
 80085e4:	0800c214 	.word	0x0800c214
 80085e8:	48000400 	.word	0x48000400

080085ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b096      	sub	sp, #88	; 0x58
 80085f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80085f2:	f107 0314 	add.w	r3, r7, #20
 80085f6:	2244      	movs	r2, #68	; 0x44
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f002 fe5a 	bl	800b2b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008600:	463b      	mov	r3, r7
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	605a      	str	r2, [r3, #4]
 8008608:	609a      	str	r2, [r3, #8]
 800860a:	60da      	str	r2, [r3, #12]
 800860c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800860e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008612:	f000 fd7d 	bl	8009110 <HAL_PWREx_ControlVoltageScaling>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800861c:	f000 f8ac 	bl	8008778 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008620:	2310      	movs	r3, #16
 8008622:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008624:	2301      	movs	r3, #1
 8008626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008628:	2300      	movs	r3, #0
 800862a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800862c:	2360      	movs	r3, #96	; 0x60
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008630:	2300      	movs	r3, #0
 8008632:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008634:	f107 0314 	add.w	r3, r7, #20
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fdbf 	bl	80091bc <HAL_RCC_OscConfig>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8008644:	f000 f898 	bl	8008778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008648:	230f      	movs	r3, #15
 800864a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800864c:	2300      	movs	r3, #0
 800864e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008650:	2300      	movs	r3, #0
 8008652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008658:	2300      	movs	r3, #0
 800865a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800865c:	463b      	mov	r3, r7
 800865e:	2100      	movs	r1, #0
 8008660:	4618      	mov	r0, r3
 8008662:	f001 f9c5 	bl	80099f0 <HAL_RCC_ClockConfig>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800866c:	f000 f884 	bl	8008778 <Error_Handler>
  }
}
 8008670:	bf00      	nop
 8008672:	3758      	adds	r7, #88	; 0x58
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800867c:	4b14      	ldr	r3, [pc, #80]	; (80086d0 <MX_USART3_UART_Init+0x58>)
 800867e:	4a15      	ldr	r2, [pc, #84]	; (80086d4 <MX_USART3_UART_Init+0x5c>)
 8008680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008682:	4b13      	ldr	r3, [pc, #76]	; (80086d0 <MX_USART3_UART_Init+0x58>)
 8008684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800868a:	4b11      	ldr	r3, [pc, #68]	; (80086d0 <MX_USART3_UART_Init+0x58>)
 800868c:	2200      	movs	r2, #0
 800868e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008690:	4b0f      	ldr	r3, [pc, #60]	; (80086d0 <MX_USART3_UART_Init+0x58>)
 8008692:	2200      	movs	r2, #0
 8008694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008696:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <MX_USART3_UART_Init+0x58>)
 8008698:	2200      	movs	r2, #0
 800869a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800869c:	4b0c      	ldr	r3, [pc, #48]	; (80086d0 <MX_USART3_UART_Init+0x58>)
 800869e:	220c      	movs	r2, #12
 80086a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086a2:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <MX_USART3_UART_Init+0x58>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80086a8:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <MX_USART3_UART_Init+0x58>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80086ae:	4b08      	ldr	r3, [pc, #32]	; (80086d0 <MX_USART3_UART_Init+0x58>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80086b4:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <MX_USART3_UART_Init+0x58>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80086ba:	4805      	ldr	r0, [pc, #20]	; (80086d0 <MX_USART3_UART_Init+0x58>)
 80086bc:	f002 f886 	bl	800a7cc <HAL_UART_Init>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80086c6:	f000 f857 	bl	8008778 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80086ca:	bf00      	nop
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	2000008c 	.word	0x2000008c
 80086d4:	40004800 	.word	0x40004800

080086d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086de:	f107 030c 	add.w	r3, r7, #12
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	605a      	str	r2, [r3, #4]
 80086e8:	609a      	str	r2, [r3, #8]
 80086ea:	60da      	str	r2, [r3, #12]
 80086ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80086ee:	4b17      	ldr	r3, [pc, #92]	; (800874c <MX_GPIO_Init+0x74>)
 80086f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f2:	4a16      	ldr	r2, [pc, #88]	; (800874c <MX_GPIO_Init+0x74>)
 80086f4:	f043 0308 	orr.w	r3, r3, #8
 80086f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086fa:	4b14      	ldr	r3, [pc, #80]	; (800874c <MX_GPIO_Init+0x74>)
 80086fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	60bb      	str	r3, [r7, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008706:	4b11      	ldr	r3, [pc, #68]	; (800874c <MX_GPIO_Init+0x74>)
 8008708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800870a:	4a10      	ldr	r2, [pc, #64]	; (800874c <MX_GPIO_Init+0x74>)
 800870c:	f043 0302 	orr.w	r3, r3, #2
 8008710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008712:	4b0e      	ldr	r3, [pc, #56]	; (800874c <MX_GPIO_Init+0x74>)
 8008714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	607b      	str	r3, [r7, #4]
 800871c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800871e:	2200      	movs	r2, #0
 8008720:	2180      	movs	r1, #128	; 0x80
 8008722:	480b      	ldr	r0, [pc, #44]	; (8008750 <MX_GPIO_Init+0x78>)
 8008724:	f000 fcce 	bl	80090c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008728:	2380      	movs	r3, #128	; 0x80
 800872a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800872c:	2301      	movs	r3, #1
 800872e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008730:	2300      	movs	r3, #0
 8008732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008734:	2300      	movs	r3, #0
 8008736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008738:	f107 030c 	add.w	r3, r7, #12
 800873c:	4619      	mov	r1, r3
 800873e:	4804      	ldr	r0, [pc, #16]	; (8008750 <MX_GPIO_Init+0x78>)
 8008740:	f000 fb2e 	bl	8008da0 <HAL_GPIO_Init>

}
 8008744:	bf00      	nop
 8008746:	3720      	adds	r7, #32
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	40021000 	.word	0x40021000
 8008750:	48000400 	.word	0x48000400

08008754 <__io_putchar>:

int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800875c:	1d39      	adds	r1, r7, #4
 800875e:	f04f 33ff 	mov.w	r3, #4294967295
 8008762:	2201      	movs	r2, #1
 8008764:	4803      	ldr	r0, [pc, #12]	; (8008774 <__io_putchar+0x20>)
 8008766:	f002 f87f 	bl	800a868 <HAL_UART_Transmit>

	return ch;
 800876a:	687b      	ldr	r3, [r7, #4]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	2000008c 	.word	0x2000008c

08008778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800877c:	b672      	cpsid	i
}
 800877e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008780:	e7fe      	b.n	8008780 <Error_Handler+0x8>
	...

08008784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800878a:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <HAL_MspInit+0x44>)
 800878c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800878e:	4a0e      	ldr	r2, [pc, #56]	; (80087c8 <HAL_MspInit+0x44>)
 8008790:	f043 0301 	orr.w	r3, r3, #1
 8008794:	6613      	str	r3, [r2, #96]	; 0x60
 8008796:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <HAL_MspInit+0x44>)
 8008798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	607b      	str	r3, [r7, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087a2:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <HAL_MspInit+0x44>)
 80087a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a6:	4a08      	ldr	r2, [pc, #32]	; (80087c8 <HAL_MspInit+0x44>)
 80087a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ac:	6593      	str	r3, [r2, #88]	; 0x58
 80087ae:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <HAL_MspInit+0x44>)
 80087b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b6:	603b      	str	r3, [r7, #0]
 80087b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	40021000 	.word	0x40021000

080087cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b0ac      	sub	sp, #176	; 0xb0
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	605a      	str	r2, [r3, #4]
 80087de:	609a      	str	r2, [r3, #8]
 80087e0:	60da      	str	r2, [r3, #12]
 80087e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80087e4:	f107 0310 	add.w	r3, r7, #16
 80087e8:	228c      	movs	r2, #140	; 0x8c
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f002 fd61 	bl	800b2b4 <memset>
  if(huart->Instance==USART3)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a21      	ldr	r2, [pc, #132]	; (800887c <HAL_UART_MspInit+0xb0>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d13b      	bne.n	8008874 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80087fc:	2304      	movs	r3, #4
 80087fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008800:	2300      	movs	r3, #0
 8008802:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008804:	f107 0310 	add.w	r3, r7, #16
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fb15 	bl	8009e38 <HAL_RCCEx_PeriphCLKConfig>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008814:	f7ff ffb0 	bl	8008778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008818:	4b19      	ldr	r3, [pc, #100]	; (8008880 <HAL_UART_MspInit+0xb4>)
 800881a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881c:	4a18      	ldr	r2, [pc, #96]	; (8008880 <HAL_UART_MspInit+0xb4>)
 800881e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008822:	6593      	str	r3, [r2, #88]	; 0x58
 8008824:	4b16      	ldr	r3, [pc, #88]	; (8008880 <HAL_UART_MspInit+0xb4>)
 8008826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008830:	4b13      	ldr	r3, [pc, #76]	; (8008880 <HAL_UART_MspInit+0xb4>)
 8008832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008834:	4a12      	ldr	r2, [pc, #72]	; (8008880 <HAL_UART_MspInit+0xb4>)
 8008836:	f043 0308 	orr.w	r3, r3, #8
 800883a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800883c:	4b10      	ldr	r3, [pc, #64]	; (8008880 <HAL_UART_MspInit+0xb4>)
 800883e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008840:	f003 0308 	and.w	r3, r3, #8
 8008844:	60bb      	str	r3, [r7, #8]
 8008846:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008848:	f44f 7340 	mov.w	r3, #768	; 0x300
 800884c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008850:	2302      	movs	r3, #2
 8008852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008856:	2300      	movs	r3, #0
 8008858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800885c:	2303      	movs	r3, #3
 800885e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008862:	2307      	movs	r3, #7
 8008864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008868:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800886c:	4619      	mov	r1, r3
 800886e:	4805      	ldr	r0, [pc, #20]	; (8008884 <HAL_UART_MspInit+0xb8>)
 8008870:	f000 fa96 	bl	8008da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008874:	bf00      	nop
 8008876:	37b0      	adds	r7, #176	; 0xb0
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	40004800 	.word	0x40004800
 8008880:	40021000 	.word	0x40021000
 8008884:	48000c00 	.word	0x48000c00

08008888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008888:	b480      	push	{r7}
 800888a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800888c:	e7fe      	b.n	800888c <NMI_Handler+0x4>

0800888e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800888e:	b480      	push	{r7}
 8008890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008892:	e7fe      	b.n	8008892 <HardFault_Handler+0x4>

08008894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008894:	b480      	push	{r7}
 8008896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008898:	e7fe      	b.n	8008898 <MemManage_Handler+0x4>

0800889a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800889a:	b480      	push	{r7}
 800889c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800889e:	e7fe      	b.n	800889e <BusFault_Handler+0x4>

080088a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088a4:	e7fe      	b.n	80088a4 <UsageFault_Handler+0x4>

080088a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088a6:	b480      	push	{r7}
 80088a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088aa:	bf00      	nop
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088b8:	bf00      	nop
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088c2:	b480      	push	{r7}
 80088c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088c6:	bf00      	nop
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088d4:	f000 f93a 	bl	8008b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088d8:	bf00      	nop
 80088da:	bd80      	pop	{r7, pc}

080088dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088e8:	2300      	movs	r3, #0
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	e00a      	b.n	8008904 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80088ee:	f3af 8000 	nop.w
 80088f2:	4601      	mov	r1, r0
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	60ba      	str	r2, [r7, #8]
 80088fa:	b2ca      	uxtb	r2, r1
 80088fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	3301      	adds	r3, #1
 8008902:	617b      	str	r3, [r7, #20]
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	429a      	cmp	r2, r3
 800890a:	dbf0      	blt.n	80088ee <_read+0x12>
	}

return len;
 800890c:	687b      	ldr	r3, [r7, #4]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b086      	sub	sp, #24
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008922:	2300      	movs	r3, #0
 8008924:	617b      	str	r3, [r7, #20]
 8008926:	e009      	b.n	800893c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	60ba      	str	r2, [r7, #8]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff ff0f 	bl	8008754 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	3301      	adds	r3, #1
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	dbf1      	blt.n	8008928 <_write+0x12>
	}
	return len;
 8008944:	687b      	ldr	r3, [r7, #4]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <_close>:

int _close(int file)
{
 800894e:	b480      	push	{r7}
 8008950:	b083      	sub	sp, #12
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
	return -1;
 8008956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008966:	b480      	push	{r7}
 8008968:	b083      	sub	sp, #12
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008976:	605a      	str	r2, [r3, #4]
	return 0;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <_isatty>:

int _isatty(int file)
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
	return 1;
 800898e:	2301      	movs	r3, #1
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
	return 0;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
	...

080089b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80089c0:	4a14      	ldr	r2, [pc, #80]	; (8008a14 <_sbrk+0x5c>)
 80089c2:	4b15      	ldr	r3, [pc, #84]	; (8008a18 <_sbrk+0x60>)
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80089cc:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <_sbrk+0x64>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d102      	bne.n	80089da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80089d4:	4b11      	ldr	r3, [pc, #68]	; (8008a1c <_sbrk+0x64>)
 80089d6:	4a12      	ldr	r2, [pc, #72]	; (8008a20 <_sbrk+0x68>)
 80089d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80089da:	4b10      	ldr	r3, [pc, #64]	; (8008a1c <_sbrk+0x64>)
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4413      	add	r3, r2
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d207      	bcs.n	80089f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80089e8:	f002 fc3a 	bl	800b260 <__errno>
 80089ec:	4603      	mov	r3, r0
 80089ee:	220c      	movs	r2, #12
 80089f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80089f2:	f04f 33ff 	mov.w	r3, #4294967295
 80089f6:	e009      	b.n	8008a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80089f8:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <_sbrk+0x64>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80089fe:	4b07      	ldr	r3, [pc, #28]	; (8008a1c <_sbrk+0x64>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4413      	add	r3, r2
 8008a06:	4a05      	ldr	r2, [pc, #20]	; (8008a1c <_sbrk+0x64>)
 8008a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	20050000 	.word	0x20050000
 8008a18:	00000400 	.word	0x00000400
 8008a1c:	20000110 	.word	0x20000110
 8008a20:	20000128 	.word	0x20000128

08008a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008a24:	b480      	push	{r7}
 8008a26:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8008a28:	4b08      	ldr	r3, [pc, #32]	; (8008a4c <SystemInit+0x28>)
 8008a2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008a2e:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008a30:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <SystemInit+0x28>)
 8008a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a36:	4a05      	ldr	r2, [pc, #20]	; (8008a4c <SystemInit+0x28>)
 8008a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8008a40:	bf00      	nop
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	e000ed00 	.word	0xe000ed00

08008a50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008a54:	f7ff ffe6 	bl	8008a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008a58:	480c      	ldr	r0, [pc, #48]	; (8008a8c <LoopForever+0x6>)
  ldr r1, =_edata
 8008a5a:	490d      	ldr	r1, [pc, #52]	; (8008a90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008a5c:	4a0d      	ldr	r2, [pc, #52]	; (8008a94 <LoopForever+0xe>)
  movs r3, #0
 8008a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a60:	e002      	b.n	8008a68 <LoopCopyDataInit>

08008a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a66:	3304      	adds	r3, #4

08008a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a6c:	d3f9      	bcc.n	8008a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a6e:	4a0a      	ldr	r2, [pc, #40]	; (8008a98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008a70:	4c0a      	ldr	r4, [pc, #40]	; (8008a9c <LoopForever+0x16>)
  movs r3, #0
 8008a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a74:	e001      	b.n	8008a7a <LoopFillZerobss>

08008a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a78:	3204      	adds	r2, #4

08008a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a7c:	d3fb      	bcc.n	8008a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008a7e:	f002 fbf5 	bl	800b26c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008a82:	f7ff fd87 	bl	8008594 <main>

08008a86 <LoopForever>:

LoopForever:
    b LoopForever
 8008a86:	e7fe      	b.n	8008a86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008a88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8008a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008a90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8008a94:	0800c324 	.word	0x0800c324
  ldr r2, =_sbss
 8008a98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8008a9c:	20000128 	.word	0x20000128

08008aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008aa0:	e7fe      	b.n	8008aa0 <ADC1_2_IRQHandler>

08008aa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008aac:	2003      	movs	r0, #3
 8008aae:	f000 f943 	bl	8008d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008ab2:	200f      	movs	r0, #15
 8008ab4:	f000 f80e 	bl	8008ad4 <HAL_InitTick>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	71fb      	strb	r3, [r7, #7]
 8008ac2:	e001      	b.n	8008ac8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008ac4:	f7ff fe5e 	bl	8008784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008ae0:	4b17      	ldr	r3, [pc, #92]	; (8008b40 <HAL_InitTick+0x6c>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d023      	beq.n	8008b30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008ae8:	4b16      	ldr	r3, [pc, #88]	; (8008b44 <HAL_InitTick+0x70>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <HAL_InitTick+0x6c>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	4619      	mov	r1, r3
 8008af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f941 	bl	8008d86 <HAL_SYSTICK_Config>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10f      	bne.n	8008b2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b0f      	cmp	r3, #15
 8008b0e:	d809      	bhi.n	8008b24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b10:	2200      	movs	r2, #0
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295
 8008b18:	f000 f919 	bl	8008d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008b1c:	4a0a      	ldr	r2, [pc, #40]	; (8008b48 <HAL_InitTick+0x74>)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6013      	str	r3, [r2, #0]
 8008b22:	e007      	b.n	8008b34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	73fb      	strb	r3, [r7, #15]
 8008b28:	e004      	b.n	8008b34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	73fb      	strb	r3, [r7, #15]
 8008b2e:	e001      	b.n	8008b34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	20000008 	.word	0x20000008
 8008b44:	20000000 	.word	0x20000000
 8008b48:	20000004 	.word	0x20000004

08008b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008b50:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <HAL_IncTick+0x20>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	461a      	mov	r2, r3
 8008b56:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <HAL_IncTick+0x24>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	4a04      	ldr	r2, [pc, #16]	; (8008b70 <HAL_IncTick+0x24>)
 8008b5e:	6013      	str	r3, [r2, #0]
}
 8008b60:	bf00      	nop
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	20000008 	.word	0x20000008
 8008b70:	20000114 	.word	0x20000114

08008b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
  return uwTick;
 8008b78:	4b03      	ldr	r3, [pc, #12]	; (8008b88 <HAL_GetTick+0x14>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	20000114 	.word	0x20000114

08008b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b94:	f7ff ffee 	bl	8008b74 <HAL_GetTick>
 8008b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba4:	d005      	beq.n	8008bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008ba6:	4b0a      	ldr	r3, [pc, #40]	; (8008bd0 <HAL_Delay+0x44>)
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	4413      	add	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008bb2:	bf00      	nop
 8008bb4:	f7ff ffde 	bl	8008b74 <HAL_GetTick>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d8f7      	bhi.n	8008bb4 <HAL_Delay+0x28>
  {
  }
}
 8008bc4:	bf00      	nop
 8008bc6:	bf00      	nop
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000008 	.word	0x20000008

08008bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f003 0307 	and.w	r3, r3, #7
 8008be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008be4:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <__NVIC_SetPriorityGrouping+0x44>)
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c06:	4a04      	ldr	r2, [pc, #16]	; (8008c18 <__NVIC_SetPriorityGrouping+0x44>)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	60d3      	str	r3, [r2, #12]
}
 8008c0c:	bf00      	nop
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	e000ed00 	.word	0xe000ed00

08008c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c20:	4b04      	ldr	r3, [pc, #16]	; (8008c34 <__NVIC_GetPriorityGrouping+0x18>)
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	0a1b      	lsrs	r3, r3, #8
 8008c26:	f003 0307 	and.w	r3, r3, #7
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	e000ed00 	.word	0xe000ed00

08008c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	6039      	str	r1, [r7, #0]
 8008c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	db0a      	blt.n	8008c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	490c      	ldr	r1, [pc, #48]	; (8008c84 <__NVIC_SetPriority+0x4c>)
 8008c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c56:	0112      	lsls	r2, r2, #4
 8008c58:	b2d2      	uxtb	r2, r2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c60:	e00a      	b.n	8008c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	4908      	ldr	r1, [pc, #32]	; (8008c88 <__NVIC_SetPriority+0x50>)
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	f003 030f 	and.w	r3, r3, #15
 8008c6e:	3b04      	subs	r3, #4
 8008c70:	0112      	lsls	r2, r2, #4
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	440b      	add	r3, r1
 8008c76:	761a      	strb	r2, [r3, #24]
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	e000e100 	.word	0xe000e100
 8008c88:	e000ed00 	.word	0xe000ed00

08008c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b089      	sub	sp, #36	; 0x24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f003 0307 	and.w	r3, r3, #7
 8008c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	f1c3 0307 	rsb	r3, r3, #7
 8008ca6:	2b04      	cmp	r3, #4
 8008ca8:	bf28      	it	cs
 8008caa:	2304      	movcs	r3, #4
 8008cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	2b06      	cmp	r3, #6
 8008cb4:	d902      	bls.n	8008cbc <NVIC_EncodePriority+0x30>
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	3b03      	subs	r3, #3
 8008cba:	e000      	b.n	8008cbe <NVIC_EncodePriority+0x32>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cca:	43da      	mvns	r2, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	401a      	ands	r2, r3
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	fa01 f303 	lsl.w	r3, r1, r3
 8008cde:	43d9      	mvns	r1, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ce4:	4313      	orrs	r3, r2
         );
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3724      	adds	r7, #36	; 0x24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
	...

08008cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d04:	d301      	bcc.n	8008d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d06:	2301      	movs	r3, #1
 8008d08:	e00f      	b.n	8008d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d0a:	4a0a      	ldr	r2, [pc, #40]	; (8008d34 <SysTick_Config+0x40>)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d12:	210f      	movs	r1, #15
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295
 8008d18:	f7ff ff8e 	bl	8008c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d1c:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <SysTick_Config+0x40>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d22:	4b04      	ldr	r3, [pc, #16]	; (8008d34 <SysTick_Config+0x40>)
 8008d24:	2207      	movs	r2, #7
 8008d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	e000e010 	.word	0xe000e010

08008d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff ff47 	bl	8008bd4 <__NVIC_SetPriorityGrouping>
}
 8008d46:	bf00      	nop
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b086      	sub	sp, #24
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	4603      	mov	r3, r0
 8008d56:	60b9      	str	r1, [r7, #8]
 8008d58:	607a      	str	r2, [r7, #4]
 8008d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d60:	f7ff ff5c 	bl	8008c1c <__NVIC_GetPriorityGrouping>
 8008d64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	68b9      	ldr	r1, [r7, #8]
 8008d6a:	6978      	ldr	r0, [r7, #20]
 8008d6c:	f7ff ff8e 	bl	8008c8c <NVIC_EncodePriority>
 8008d70:	4602      	mov	r2, r0
 8008d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7ff ff5d 	bl	8008c38 <__NVIC_SetPriority>
}
 8008d7e:	bf00      	nop
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff ffb0 	bl	8008cf4 <SysTick_Config>
 8008d94:	4603      	mov	r3, r0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008dae:	e166      	b.n	800907e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	2101      	movs	r1, #1
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 8158 	beq.w	8009078 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f003 0303 	and.w	r3, r3, #3
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d005      	beq.n	8008de0 <HAL_GPIO_Init+0x40>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	f003 0303 	and.w	r3, r3, #3
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d130      	bne.n	8008e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	2203      	movs	r2, #3
 8008dec:	fa02 f303 	lsl.w	r3, r2, r3
 8008df0:	43db      	mvns	r3, r3
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	4013      	ands	r3, r2
 8008df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	68da      	ldr	r2, [r3, #12]
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	fa02 f303 	lsl.w	r3, r2, r3
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e16:	2201      	movs	r2, #1
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e1e:	43db      	mvns	r3, r3
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	4013      	ands	r3, r2
 8008e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	091b      	lsrs	r3, r3, #4
 8008e2c:	f003 0201 	and.w	r2, r3, #1
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	fa02 f303 	lsl.w	r3, r2, r3
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d017      	beq.n	8008e7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	005b      	lsls	r3, r3, #1
 8008e58:	2203      	movs	r2, #3
 8008e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5e:	43db      	mvns	r3, r3
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	4013      	ands	r3, r2
 8008e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	689a      	ldr	r2, [r3, #8]
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d123      	bne.n	8008ed2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	08da      	lsrs	r2, r3, #3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3208      	adds	r2, #8
 8008e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	f003 0307 	and.w	r3, r3, #7
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	220f      	movs	r2, #15
 8008ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea6:	43db      	mvns	r3, r3
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	4013      	ands	r3, r2
 8008eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	691a      	ldr	r2, [r3, #16]
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f003 0307 	and.w	r3, r3, #7
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	fa02 f303 	lsl.w	r3, r2, r3
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	08da      	lsrs	r2, r3, #3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3208      	adds	r2, #8
 8008ecc:	6939      	ldr	r1, [r7, #16]
 8008ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	005b      	lsls	r3, r3, #1
 8008edc:	2203      	movs	r2, #3
 8008ede:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee2:	43db      	mvns	r3, r3
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f003 0203 	and.w	r2, r3, #3
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 80b2 	beq.w	8009078 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f14:	4b61      	ldr	r3, [pc, #388]	; (800909c <HAL_GPIO_Init+0x2fc>)
 8008f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f18:	4a60      	ldr	r2, [pc, #384]	; (800909c <HAL_GPIO_Init+0x2fc>)
 8008f1a:	f043 0301 	orr.w	r3, r3, #1
 8008f1e:	6613      	str	r3, [r2, #96]	; 0x60
 8008f20:	4b5e      	ldr	r3, [pc, #376]	; (800909c <HAL_GPIO_Init+0x2fc>)
 8008f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	60bb      	str	r3, [r7, #8]
 8008f2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008f2c:	4a5c      	ldr	r2, [pc, #368]	; (80090a0 <HAL_GPIO_Init+0x300>)
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	089b      	lsrs	r3, r3, #2
 8008f32:	3302      	adds	r3, #2
 8008f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f003 0303 	and.w	r3, r3, #3
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	220f      	movs	r2, #15
 8008f44:	fa02 f303 	lsl.w	r3, r2, r3
 8008f48:	43db      	mvns	r3, r3
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008f56:	d02b      	beq.n	8008fb0 <HAL_GPIO_Init+0x210>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a52      	ldr	r2, [pc, #328]	; (80090a4 <HAL_GPIO_Init+0x304>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d025      	beq.n	8008fac <HAL_GPIO_Init+0x20c>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a51      	ldr	r2, [pc, #324]	; (80090a8 <HAL_GPIO_Init+0x308>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d01f      	beq.n	8008fa8 <HAL_GPIO_Init+0x208>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a50      	ldr	r2, [pc, #320]	; (80090ac <HAL_GPIO_Init+0x30c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d019      	beq.n	8008fa4 <HAL_GPIO_Init+0x204>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a4f      	ldr	r2, [pc, #316]	; (80090b0 <HAL_GPIO_Init+0x310>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d013      	beq.n	8008fa0 <HAL_GPIO_Init+0x200>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a4e      	ldr	r2, [pc, #312]	; (80090b4 <HAL_GPIO_Init+0x314>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00d      	beq.n	8008f9c <HAL_GPIO_Init+0x1fc>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a4d      	ldr	r2, [pc, #308]	; (80090b8 <HAL_GPIO_Init+0x318>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d007      	beq.n	8008f98 <HAL_GPIO_Init+0x1f8>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a4c      	ldr	r2, [pc, #304]	; (80090bc <HAL_GPIO_Init+0x31c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d101      	bne.n	8008f94 <HAL_GPIO_Init+0x1f4>
 8008f90:	2307      	movs	r3, #7
 8008f92:	e00e      	b.n	8008fb2 <HAL_GPIO_Init+0x212>
 8008f94:	2308      	movs	r3, #8
 8008f96:	e00c      	b.n	8008fb2 <HAL_GPIO_Init+0x212>
 8008f98:	2306      	movs	r3, #6
 8008f9a:	e00a      	b.n	8008fb2 <HAL_GPIO_Init+0x212>
 8008f9c:	2305      	movs	r3, #5
 8008f9e:	e008      	b.n	8008fb2 <HAL_GPIO_Init+0x212>
 8008fa0:	2304      	movs	r3, #4
 8008fa2:	e006      	b.n	8008fb2 <HAL_GPIO_Init+0x212>
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e004      	b.n	8008fb2 <HAL_GPIO_Init+0x212>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	e002      	b.n	8008fb2 <HAL_GPIO_Init+0x212>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <HAL_GPIO_Init+0x212>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	f002 0203 	and.w	r2, r2, #3
 8008fb8:	0092      	lsls	r2, r2, #2
 8008fba:	4093      	lsls	r3, r2
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008fc2:	4937      	ldr	r1, [pc, #220]	; (80090a0 <HAL_GPIO_Init+0x300>)
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	089b      	lsrs	r3, r3, #2
 8008fc8:	3302      	adds	r3, #2
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fd0:	4b3b      	ldr	r3, [pc, #236]	; (80090c0 <HAL_GPIO_Init+0x320>)
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	43db      	mvns	r3, r3
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	4013      	ands	r3, r2
 8008fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008ff4:	4a32      	ldr	r2, [pc, #200]	; (80090c0 <HAL_GPIO_Init+0x320>)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008ffa:	4b31      	ldr	r3, [pc, #196]	; (80090c0 <HAL_GPIO_Init+0x320>)
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	43db      	mvns	r3, r3
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	4013      	ands	r3, r2
 8009008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	4313      	orrs	r3, r2
 800901c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800901e:	4a28      	ldr	r2, [pc, #160]	; (80090c0 <HAL_GPIO_Init+0x320>)
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009024:	4b26      	ldr	r3, [pc, #152]	; (80090c0 <HAL_GPIO_Init+0x320>)
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	43db      	mvns	r3, r3
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	4013      	ands	r3, r2
 8009032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	4313      	orrs	r3, r2
 8009046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009048:	4a1d      	ldr	r2, [pc, #116]	; (80090c0 <HAL_GPIO_Init+0x320>)
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800904e:	4b1c      	ldr	r3, [pc, #112]	; (80090c0 <HAL_GPIO_Init+0x320>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	43db      	mvns	r3, r3
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	4013      	ands	r3, r2
 800905c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4313      	orrs	r3, r2
 8009070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009072:	4a13      	ldr	r2, [pc, #76]	; (80090c0 <HAL_GPIO_Init+0x320>)
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	3301      	adds	r3, #1
 800907c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	fa22 f303 	lsr.w	r3, r2, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	f47f ae91 	bne.w	8008db0 <HAL_GPIO_Init+0x10>
  }
}
 800908e:	bf00      	nop
 8009090:	bf00      	nop
 8009092:	371c      	adds	r7, #28
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	40021000 	.word	0x40021000
 80090a0:	40010000 	.word	0x40010000
 80090a4:	48000400 	.word	0x48000400
 80090a8:	48000800 	.word	0x48000800
 80090ac:	48000c00 	.word	0x48000c00
 80090b0:	48001000 	.word	0x48001000
 80090b4:	48001400 	.word	0x48001400
 80090b8:	48001800 	.word	0x48001800
 80090bc:	48001c00 	.word	0x48001c00
 80090c0:	40010400 	.word	0x40010400

080090c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	807b      	strh	r3, [r7, #2]
 80090d0:	4613      	mov	r3, r2
 80090d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80090d4:	787b      	ldrb	r3, [r7, #1]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80090da:	887a      	ldrh	r2, [r7, #2]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80090e0:	e002      	b.n	80090e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80090e2:	887a      	ldrh	r2, [r7, #2]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80090f4:	b480      	push	{r7}
 80090f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <HAL_PWREx_GetVoltageRange+0x18>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009100:	4618      	mov	r0, r3
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	40007000 	.word	0x40007000

08009110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800911e:	d130      	bne.n	8009182 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009120:	4b23      	ldr	r3, [pc, #140]	; (80091b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800912c:	d038      	beq.n	80091a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800912e:	4b20      	ldr	r3, [pc, #128]	; (80091b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009136:	4a1e      	ldr	r2, [pc, #120]	; (80091b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800913c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800913e:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2232      	movs	r2, #50	; 0x32
 8009144:	fb02 f303 	mul.w	r3, r2, r3
 8009148:	4a1b      	ldr	r2, [pc, #108]	; (80091b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800914a:	fba2 2303 	umull	r2, r3, r2, r3
 800914e:	0c9b      	lsrs	r3, r3, #18
 8009150:	3301      	adds	r3, #1
 8009152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009154:	e002      	b.n	800915c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3b01      	subs	r3, #1
 800915a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800915c:	4b14      	ldr	r3, [pc, #80]	; (80091b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009168:	d102      	bne.n	8009170 <HAL_PWREx_ControlVoltageScaling+0x60>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1f2      	bne.n	8009156 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009170:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800917c:	d110      	bne.n	80091a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e00f      	b.n	80091a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009182:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800918a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800918e:	d007      	beq.n	80091a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009190:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009198:	4a05      	ldr	r2, [pc, #20]	; (80091b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800919a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800919e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	40007000 	.word	0x40007000
 80091b4:	20000000 	.word	0x20000000
 80091b8:	431bde83 	.word	0x431bde83

080091bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d102      	bne.n	80091d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	f000 bc08 	b.w	80099e0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091d0:	4b96      	ldr	r3, [pc, #600]	; (800942c <HAL_RCC_OscConfig+0x270>)
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f003 030c 	and.w	r3, r3, #12
 80091d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80091da:	4b94      	ldr	r3, [pc, #592]	; (800942c <HAL_RCC_OscConfig+0x270>)
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f003 0303 	and.w	r3, r3, #3
 80091e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 80e4 	beq.w	80093ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d007      	beq.n	8009208 <HAL_RCC_OscConfig+0x4c>
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	2b0c      	cmp	r3, #12
 80091fc:	f040 808b 	bne.w	8009316 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2b01      	cmp	r3, #1
 8009204:	f040 8087 	bne.w	8009316 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009208:	4b88      	ldr	r3, [pc, #544]	; (800942c <HAL_RCC_OscConfig+0x270>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d005      	beq.n	8009220 <HAL_RCC_OscConfig+0x64>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e3df      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1a      	ldr	r2, [r3, #32]
 8009224:	4b81      	ldr	r3, [pc, #516]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0308 	and.w	r3, r3, #8
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <HAL_RCC_OscConfig+0x7e>
 8009230:	4b7e      	ldr	r3, [pc, #504]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009238:	e005      	b.n	8009246 <HAL_RCC_OscConfig+0x8a>
 800923a:	4b7c      	ldr	r3, [pc, #496]	; (800942c <HAL_RCC_OscConfig+0x270>)
 800923c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009240:	091b      	lsrs	r3, r3, #4
 8009242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009246:	4293      	cmp	r3, r2
 8009248:	d223      	bcs.n	8009292 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	4618      	mov	r0, r3
 8009250:	f000 fd92 	bl	8009d78 <RCC_SetFlashLatencyFromMSIRange>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e3c0      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800925e:	4b73      	ldr	r3, [pc, #460]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a72      	ldr	r2, [pc, #456]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009264:	f043 0308 	orr.w	r3, r3, #8
 8009268:	6013      	str	r3, [r2, #0]
 800926a:	4b70      	ldr	r3, [pc, #448]	; (800942c <HAL_RCC_OscConfig+0x270>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	496d      	ldr	r1, [pc, #436]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009278:	4313      	orrs	r3, r2
 800927a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800927c:	4b6b      	ldr	r3, [pc, #428]	; (800942c <HAL_RCC_OscConfig+0x270>)
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	4968      	ldr	r1, [pc, #416]	; (800942c <HAL_RCC_OscConfig+0x270>)
 800928c:	4313      	orrs	r3, r2
 800928e:	604b      	str	r3, [r1, #4]
 8009290:	e025      	b.n	80092de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009292:	4b66      	ldr	r3, [pc, #408]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a65      	ldr	r2, [pc, #404]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009298:	f043 0308 	orr.w	r3, r3, #8
 800929c:	6013      	str	r3, [r2, #0]
 800929e:	4b63      	ldr	r3, [pc, #396]	; (800942c <HAL_RCC_OscConfig+0x270>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	4960      	ldr	r1, [pc, #384]	; (800942c <HAL_RCC_OscConfig+0x270>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80092b0:	4b5e      	ldr	r3, [pc, #376]	; (800942c <HAL_RCC_OscConfig+0x270>)
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	495b      	ldr	r1, [pc, #364]	; (800942c <HAL_RCC_OscConfig+0x270>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d109      	bne.n	80092de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 fd52 	bl	8009d78 <RCC_SetFlashLatencyFromMSIRange>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e380      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80092de:	f000 fc87 	bl	8009bf0 <HAL_RCC_GetSysClockFreq>
 80092e2:	4602      	mov	r2, r0
 80092e4:	4b51      	ldr	r3, [pc, #324]	; (800942c <HAL_RCC_OscConfig+0x270>)
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	091b      	lsrs	r3, r3, #4
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	4950      	ldr	r1, [pc, #320]	; (8009430 <HAL_RCC_OscConfig+0x274>)
 80092f0:	5ccb      	ldrb	r3, [r1, r3]
 80092f2:	f003 031f 	and.w	r3, r3, #31
 80092f6:	fa22 f303 	lsr.w	r3, r2, r3
 80092fa:	4a4e      	ldr	r2, [pc, #312]	; (8009434 <HAL_RCC_OscConfig+0x278>)
 80092fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80092fe:	4b4e      	ldr	r3, [pc, #312]	; (8009438 <HAL_RCC_OscConfig+0x27c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff fbe6 	bl	8008ad4 <HAL_InitTick>
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d052      	beq.n	80093b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	e364      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d032      	beq.n	8009384 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800931e:	4b43      	ldr	r3, [pc, #268]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a42      	ldr	r2, [pc, #264]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009324:	f043 0301 	orr.w	r3, r3, #1
 8009328:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800932a:	f7ff fc23 	bl	8008b74 <HAL_GetTick>
 800932e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009330:	e008      	b.n	8009344 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009332:	f7ff fc1f 	bl	8008b74 <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	2b02      	cmp	r3, #2
 800933e:	d901      	bls.n	8009344 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	e34d      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009344:	4b39      	ldr	r3, [pc, #228]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0f0      	beq.n	8009332 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009350:	4b36      	ldr	r3, [pc, #216]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a35      	ldr	r2, [pc, #212]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009356:	f043 0308 	orr.w	r3, r3, #8
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	4b33      	ldr	r3, [pc, #204]	; (800942c <HAL_RCC_OscConfig+0x270>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	4930      	ldr	r1, [pc, #192]	; (800942c <HAL_RCC_OscConfig+0x270>)
 800936a:	4313      	orrs	r3, r2
 800936c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800936e:	4b2f      	ldr	r3, [pc, #188]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	021b      	lsls	r3, r3, #8
 800937c:	492b      	ldr	r1, [pc, #172]	; (800942c <HAL_RCC_OscConfig+0x270>)
 800937e:	4313      	orrs	r3, r2
 8009380:	604b      	str	r3, [r1, #4]
 8009382:	e01a      	b.n	80093ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009384:	4b29      	ldr	r3, [pc, #164]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a28      	ldr	r2, [pc, #160]	; (800942c <HAL_RCC_OscConfig+0x270>)
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009390:	f7ff fbf0 	bl	8008b74 <HAL_GetTick>
 8009394:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009396:	e008      	b.n	80093aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009398:	f7ff fbec 	bl	8008b74 <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d901      	bls.n	80093aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e31a      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80093aa:	4b20      	ldr	r3, [pc, #128]	; (800942c <HAL_RCC_OscConfig+0x270>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1f0      	bne.n	8009398 <HAL_RCC_OscConfig+0x1dc>
 80093b6:	e000      	b.n	80093ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80093b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d073      	beq.n	80094ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b08      	cmp	r3, #8
 80093ca:	d005      	beq.n	80093d8 <HAL_RCC_OscConfig+0x21c>
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	2b0c      	cmp	r3, #12
 80093d0:	d10e      	bne.n	80093f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d10b      	bne.n	80093f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093d8:	4b14      	ldr	r3, [pc, #80]	; (800942c <HAL_RCC_OscConfig+0x270>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d063      	beq.n	80094ac <HAL_RCC_OscConfig+0x2f0>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d15f      	bne.n	80094ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e2f7      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f8:	d106      	bne.n	8009408 <HAL_RCC_OscConfig+0x24c>
 80093fa:	4b0c      	ldr	r3, [pc, #48]	; (800942c <HAL_RCC_OscConfig+0x270>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a0b      	ldr	r2, [pc, #44]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	e025      	b.n	8009454 <HAL_RCC_OscConfig+0x298>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009410:	d114      	bne.n	800943c <HAL_RCC_OscConfig+0x280>
 8009412:	4b06      	ldr	r3, [pc, #24]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a05      	ldr	r2, [pc, #20]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	4b03      	ldr	r3, [pc, #12]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a02      	ldr	r2, [pc, #8]	; (800942c <HAL_RCC_OscConfig+0x270>)
 8009424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009428:	6013      	str	r3, [r2, #0]
 800942a:	e013      	b.n	8009454 <HAL_RCC_OscConfig+0x298>
 800942c:	40021000 	.word	0x40021000
 8009430:	0800c234 	.word	0x0800c234
 8009434:	20000000 	.word	0x20000000
 8009438:	20000004 	.word	0x20000004
 800943c:	4ba0      	ldr	r3, [pc, #640]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a9f      	ldr	r2, [pc, #636]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	4b9d      	ldr	r3, [pc, #628]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a9c      	ldr	r2, [pc, #624]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 800944e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d013      	beq.n	8009484 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800945c:	f7ff fb8a 	bl	8008b74 <HAL_GetTick>
 8009460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009462:	e008      	b.n	8009476 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009464:	f7ff fb86 	bl	8008b74 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	2b64      	cmp	r3, #100	; 0x64
 8009470:	d901      	bls.n	8009476 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e2b4      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009476:	4b92      	ldr	r3, [pc, #584]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d0f0      	beq.n	8009464 <HAL_RCC_OscConfig+0x2a8>
 8009482:	e014      	b.n	80094ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009484:	f7ff fb76 	bl	8008b74 <HAL_GetTick>
 8009488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800948a:	e008      	b.n	800949e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800948c:	f7ff fb72 	bl	8008b74 <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	2b64      	cmp	r3, #100	; 0x64
 8009498:	d901      	bls.n	800949e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	e2a0      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800949e:	4b88      	ldr	r3, [pc, #544]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1f0      	bne.n	800948c <HAL_RCC_OscConfig+0x2d0>
 80094aa:	e000      	b.n	80094ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d060      	beq.n	800957c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	2b04      	cmp	r3, #4
 80094be:	d005      	beq.n	80094cc <HAL_RCC_OscConfig+0x310>
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	2b0c      	cmp	r3, #12
 80094c4:	d119      	bne.n	80094fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d116      	bne.n	80094fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094cc:	4b7c      	ldr	r3, [pc, #496]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d005      	beq.n	80094e4 <HAL_RCC_OscConfig+0x328>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e27d      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094e4:	4b76      	ldr	r3, [pc, #472]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	061b      	lsls	r3, r3, #24
 80094f2:	4973      	ldr	r1, [pc, #460]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 80094f4:	4313      	orrs	r3, r2
 80094f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094f8:	e040      	b.n	800957c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d023      	beq.n	800954a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009502:	4b6f      	ldr	r3, [pc, #444]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a6e      	ldr	r2, [pc, #440]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800950c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800950e:	f7ff fb31 	bl	8008b74 <HAL_GetTick>
 8009512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009514:	e008      	b.n	8009528 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009516:	f7ff fb2d 	bl	8008b74 <HAL_GetTick>
 800951a:	4602      	mov	r2, r0
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	2b02      	cmp	r3, #2
 8009522:	d901      	bls.n	8009528 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e25b      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009528:	4b65      	ldr	r3, [pc, #404]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0f0      	beq.n	8009516 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009534:	4b62      	ldr	r3, [pc, #392]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	061b      	lsls	r3, r3, #24
 8009542:	495f      	ldr	r1, [pc, #380]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009544:	4313      	orrs	r3, r2
 8009546:	604b      	str	r3, [r1, #4]
 8009548:	e018      	b.n	800957c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800954a:	4b5d      	ldr	r3, [pc, #372]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a5c      	ldr	r2, [pc, #368]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009556:	f7ff fb0d 	bl	8008b74 <HAL_GetTick>
 800955a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800955c:	e008      	b.n	8009570 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800955e:	f7ff fb09 	bl	8008b74 <HAL_GetTick>
 8009562:	4602      	mov	r2, r0
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	2b02      	cmp	r3, #2
 800956a:	d901      	bls.n	8009570 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e237      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009570:	4b53      	ldr	r3, [pc, #332]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1f0      	bne.n	800955e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0308 	and.w	r3, r3, #8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d03c      	beq.n	8009602 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d01c      	beq.n	80095ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009590:	4b4b      	ldr	r3, [pc, #300]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009596:	4a4a      	ldr	r2, [pc, #296]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009598:	f043 0301 	orr.w	r3, r3, #1
 800959c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095a0:	f7ff fae8 	bl	8008b74 <HAL_GetTick>
 80095a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095a6:	e008      	b.n	80095ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095a8:	f7ff fae4 	bl	8008b74 <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d901      	bls.n	80095ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80095b6:	2303      	movs	r3, #3
 80095b8:	e212      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095ba:	4b41      	ldr	r3, [pc, #260]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 80095bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095c0:	f003 0302 	and.w	r3, r3, #2
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0ef      	beq.n	80095a8 <HAL_RCC_OscConfig+0x3ec>
 80095c8:	e01b      	b.n	8009602 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095ca:	4b3d      	ldr	r3, [pc, #244]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 80095cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095d0:	4a3b      	ldr	r2, [pc, #236]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 80095d2:	f023 0301 	bic.w	r3, r3, #1
 80095d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095da:	f7ff facb 	bl	8008b74 <HAL_GetTick>
 80095de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095e0:	e008      	b.n	80095f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095e2:	f7ff fac7 	bl	8008b74 <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d901      	bls.n	80095f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e1f5      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095f4:	4b32      	ldr	r3, [pc, #200]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 80095f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095fa:	f003 0302 	and.w	r3, r3, #2
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1ef      	bne.n	80095e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 80a6 	beq.w	800975c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009610:	2300      	movs	r3, #0
 8009612:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009614:	4b2a      	ldr	r3, [pc, #168]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10d      	bne.n	800963c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009620:	4b27      	ldr	r3, [pc, #156]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009624:	4a26      	ldr	r2, [pc, #152]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800962a:	6593      	str	r3, [r2, #88]	; 0x58
 800962c:	4b24      	ldr	r3, [pc, #144]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 800962e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009634:	60bb      	str	r3, [r7, #8]
 8009636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009638:	2301      	movs	r3, #1
 800963a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800963c:	4b21      	ldr	r3, [pc, #132]	; (80096c4 <HAL_RCC_OscConfig+0x508>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009644:	2b00      	cmp	r3, #0
 8009646:	d118      	bne.n	800967a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009648:	4b1e      	ldr	r3, [pc, #120]	; (80096c4 <HAL_RCC_OscConfig+0x508>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a1d      	ldr	r2, [pc, #116]	; (80096c4 <HAL_RCC_OscConfig+0x508>)
 800964e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009654:	f7ff fa8e 	bl	8008b74 <HAL_GetTick>
 8009658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800965a:	e008      	b.n	800966e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800965c:	f7ff fa8a 	bl	8008b74 <HAL_GetTick>
 8009660:	4602      	mov	r2, r0
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	2b02      	cmp	r3, #2
 8009668:	d901      	bls.n	800966e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e1b8      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800966e:	4b15      	ldr	r3, [pc, #84]	; (80096c4 <HAL_RCC_OscConfig+0x508>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0f0      	beq.n	800965c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d108      	bne.n	8009694 <HAL_RCC_OscConfig+0x4d8>
 8009682:	4b0f      	ldr	r3, [pc, #60]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 8009684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009688:	4a0d      	ldr	r2, [pc, #52]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 800968a:	f043 0301 	orr.w	r3, r3, #1
 800968e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009692:	e029      	b.n	80096e8 <HAL_RCC_OscConfig+0x52c>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	2b05      	cmp	r3, #5
 800969a:	d115      	bne.n	80096c8 <HAL_RCC_OscConfig+0x50c>
 800969c:	4b08      	ldr	r3, [pc, #32]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 800969e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a2:	4a07      	ldr	r2, [pc, #28]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 80096a4:	f043 0304 	orr.w	r3, r3, #4
 80096a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096ac:	4b04      	ldr	r3, [pc, #16]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 80096ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b2:	4a03      	ldr	r2, [pc, #12]	; (80096c0 <HAL_RCC_OscConfig+0x504>)
 80096b4:	f043 0301 	orr.w	r3, r3, #1
 80096b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096bc:	e014      	b.n	80096e8 <HAL_RCC_OscConfig+0x52c>
 80096be:	bf00      	nop
 80096c0:	40021000 	.word	0x40021000
 80096c4:	40007000 	.word	0x40007000
 80096c8:	4b9d      	ldr	r3, [pc, #628]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80096ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ce:	4a9c      	ldr	r2, [pc, #624]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80096d0:	f023 0301 	bic.w	r3, r3, #1
 80096d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096d8:	4b99      	ldr	r3, [pc, #612]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80096da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096de:	4a98      	ldr	r2, [pc, #608]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80096e0:	f023 0304 	bic.w	r3, r3, #4
 80096e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d016      	beq.n	800971e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096f0:	f7ff fa40 	bl	8008b74 <HAL_GetTick>
 80096f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096f6:	e00a      	b.n	800970e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096f8:	f7ff fa3c 	bl	8008b74 <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	f241 3288 	movw	r2, #5000	; 0x1388
 8009706:	4293      	cmp	r3, r2
 8009708:	d901      	bls.n	800970e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	e168      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800970e:	4b8c      	ldr	r3, [pc, #560]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 8009710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009714:	f003 0302 	and.w	r3, r3, #2
 8009718:	2b00      	cmp	r3, #0
 800971a:	d0ed      	beq.n	80096f8 <HAL_RCC_OscConfig+0x53c>
 800971c:	e015      	b.n	800974a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800971e:	f7ff fa29 	bl	8008b74 <HAL_GetTick>
 8009722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009724:	e00a      	b.n	800973c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009726:	f7ff fa25 	bl	8008b74 <HAL_GetTick>
 800972a:	4602      	mov	r2, r0
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	1ad3      	subs	r3, r2, r3
 8009730:	f241 3288 	movw	r2, #5000	; 0x1388
 8009734:	4293      	cmp	r3, r2
 8009736:	d901      	bls.n	800973c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e151      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800973c:	4b80      	ldr	r3, [pc, #512]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 800973e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009742:	f003 0302 	and.w	r3, r3, #2
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1ed      	bne.n	8009726 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800974a:	7ffb      	ldrb	r3, [r7, #31]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d105      	bne.n	800975c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009750:	4b7b      	ldr	r3, [pc, #492]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 8009752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009754:	4a7a      	ldr	r2, [pc, #488]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 8009756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800975a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0320 	and.w	r3, r3, #32
 8009764:	2b00      	cmp	r3, #0
 8009766:	d03c      	beq.n	80097e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976c:	2b00      	cmp	r3, #0
 800976e:	d01c      	beq.n	80097aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009770:	4b73      	ldr	r3, [pc, #460]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 8009772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009776:	4a72      	ldr	r2, [pc, #456]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 8009778:	f043 0301 	orr.w	r3, r3, #1
 800977c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009780:	f7ff f9f8 	bl	8008b74 <HAL_GetTick>
 8009784:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009786:	e008      	b.n	800979a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009788:	f7ff f9f4 	bl	8008b74 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	2b02      	cmp	r3, #2
 8009794:	d901      	bls.n	800979a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e122      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800979a:	4b69      	ldr	r3, [pc, #420]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 800979c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0ef      	beq.n	8009788 <HAL_RCC_OscConfig+0x5cc>
 80097a8:	e01b      	b.n	80097e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80097aa:	4b65      	ldr	r3, [pc, #404]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80097ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097b0:	4a63      	ldr	r2, [pc, #396]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80097b2:	f023 0301 	bic.w	r3, r3, #1
 80097b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ba:	f7ff f9db 	bl	8008b74 <HAL_GetTick>
 80097be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097c0:	e008      	b.n	80097d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097c2:	f7ff f9d7 	bl	8008b74 <HAL_GetTick>
 80097c6:	4602      	mov	r2, r0
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d901      	bls.n	80097d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e105      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097d4:	4b5a      	ldr	r3, [pc, #360]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80097d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1ef      	bne.n	80097c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 80f9 	beq.w	80099de <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	f040 80cf 	bne.w	8009994 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80097f6:	4b52      	ldr	r3, [pc, #328]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f003 0203 	and.w	r2, r3, #3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009806:	429a      	cmp	r2, r3
 8009808:	d12c      	bne.n	8009864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009814:	3b01      	subs	r3, #1
 8009816:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009818:	429a      	cmp	r2, r3
 800981a:	d123      	bne.n	8009864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009826:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009828:	429a      	cmp	r2, r3
 800982a:	d11b      	bne.n	8009864 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009836:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009838:	429a      	cmp	r2, r3
 800983a:	d113      	bne.n	8009864 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	3b01      	subs	r3, #1
 800984a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800984c:	429a      	cmp	r2, r3
 800984e:	d109      	bne.n	8009864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	085b      	lsrs	r3, r3, #1
 800985c:	3b01      	subs	r3, #1
 800985e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009860:	429a      	cmp	r2, r3
 8009862:	d071      	beq.n	8009948 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	2b0c      	cmp	r3, #12
 8009868:	d068      	beq.n	800993c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800986a:	4b35      	ldr	r3, [pc, #212]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d105      	bne.n	8009882 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009876:	4b32      	ldr	r3, [pc, #200]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e0ac      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009886:	4b2e      	ldr	r3, [pc, #184]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a2d      	ldr	r2, [pc, #180]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 800988c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009890:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009892:	f7ff f96f 	bl	8008b74 <HAL_GetTick>
 8009896:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009898:	e008      	b.n	80098ac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800989a:	f7ff f96b 	bl	8008b74 <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d901      	bls.n	80098ac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e099      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098ac:	4b24      	ldr	r3, [pc, #144]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1f0      	bne.n	800989a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098b8:	4b21      	ldr	r3, [pc, #132]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	4b21      	ldr	r3, [pc, #132]	; (8009944 <HAL_RCC_OscConfig+0x788>)
 80098be:	4013      	ands	r3, r2
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80098c8:	3a01      	subs	r2, #1
 80098ca:	0112      	lsls	r2, r2, #4
 80098cc:	4311      	orrs	r1, r2
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80098d2:	0212      	lsls	r2, r2, #8
 80098d4:	4311      	orrs	r1, r2
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80098da:	0852      	lsrs	r2, r2, #1
 80098dc:	3a01      	subs	r2, #1
 80098de:	0552      	lsls	r2, r2, #21
 80098e0:	4311      	orrs	r1, r2
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80098e6:	0852      	lsrs	r2, r2, #1
 80098e8:	3a01      	subs	r2, #1
 80098ea:	0652      	lsls	r2, r2, #25
 80098ec:	4311      	orrs	r1, r2
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80098f2:	06d2      	lsls	r2, r2, #27
 80098f4:	430a      	orrs	r2, r1
 80098f6:	4912      	ldr	r1, [pc, #72]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80098fc:	4b10      	ldr	r3, [pc, #64]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a0f      	ldr	r2, [pc, #60]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 8009902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009906:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009908:	4b0d      	ldr	r3, [pc, #52]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	4a0c      	ldr	r2, [pc, #48]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 800990e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009912:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009914:	f7ff f92e 	bl	8008b74 <HAL_GetTick>
 8009918:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800991a:	e008      	b.n	800992e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800991c:	f7ff f92a 	bl	8008b74 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	2b02      	cmp	r3, #2
 8009928:	d901      	bls.n	800992e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e058      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800992e:	4b04      	ldr	r3, [pc, #16]	; (8009940 <HAL_RCC_OscConfig+0x784>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0f0      	beq.n	800991c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800993a:	e050      	b.n	80099de <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e04f      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
 8009940:	40021000 	.word	0x40021000
 8009944:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009948:	4b27      	ldr	r3, [pc, #156]	; (80099e8 <HAL_RCC_OscConfig+0x82c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d144      	bne.n	80099de <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009954:	4b24      	ldr	r3, [pc, #144]	; (80099e8 <HAL_RCC_OscConfig+0x82c>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a23      	ldr	r2, [pc, #140]	; (80099e8 <HAL_RCC_OscConfig+0x82c>)
 800995a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800995e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009960:	4b21      	ldr	r3, [pc, #132]	; (80099e8 <HAL_RCC_OscConfig+0x82c>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	4a20      	ldr	r2, [pc, #128]	; (80099e8 <HAL_RCC_OscConfig+0x82c>)
 8009966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800996a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800996c:	f7ff f902 	bl	8008b74 <HAL_GetTick>
 8009970:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009972:	e008      	b.n	8009986 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009974:	f7ff f8fe 	bl	8008b74 <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	2b02      	cmp	r3, #2
 8009980:	d901      	bls.n	8009986 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e02c      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009986:	4b18      	ldr	r3, [pc, #96]	; (80099e8 <HAL_RCC_OscConfig+0x82c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0f0      	beq.n	8009974 <HAL_RCC_OscConfig+0x7b8>
 8009992:	e024      	b.n	80099de <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	2b0c      	cmp	r3, #12
 8009998:	d01f      	beq.n	80099da <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800999a:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <HAL_RCC_OscConfig+0x82c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a12      	ldr	r2, [pc, #72]	; (80099e8 <HAL_RCC_OscConfig+0x82c>)
 80099a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a6:	f7ff f8e5 	bl	8008b74 <HAL_GetTick>
 80099aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099ac:	e008      	b.n	80099c0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099ae:	f7ff f8e1 	bl	8008b74 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d901      	bls.n	80099c0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e00f      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099c0:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <HAL_RCC_OscConfig+0x82c>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1f0      	bne.n	80099ae <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80099cc:	4b06      	ldr	r3, [pc, #24]	; (80099e8 <HAL_RCC_OscConfig+0x82c>)
 80099ce:	68da      	ldr	r2, [r3, #12]
 80099d0:	4905      	ldr	r1, [pc, #20]	; (80099e8 <HAL_RCC_OscConfig+0x82c>)
 80099d2:	4b06      	ldr	r3, [pc, #24]	; (80099ec <HAL_RCC_OscConfig+0x830>)
 80099d4:	4013      	ands	r3, r2
 80099d6:	60cb      	str	r3, [r1, #12]
 80099d8:	e001      	b.n	80099de <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e000      	b.n	80099e0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3720      	adds	r7, #32
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	40021000 	.word	0x40021000
 80099ec:	feeefffc 	.word	0xfeeefffc

080099f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e0e7      	b.n	8009bd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009a04:	4b75      	ldr	r3, [pc, #468]	; (8009bdc <HAL_RCC_ClockConfig+0x1ec>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0307 	and.w	r3, r3, #7
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d910      	bls.n	8009a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a12:	4b72      	ldr	r3, [pc, #456]	; (8009bdc <HAL_RCC_ClockConfig+0x1ec>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f023 0207 	bic.w	r2, r3, #7
 8009a1a:	4970      	ldr	r1, [pc, #448]	; (8009bdc <HAL_RCC_ClockConfig+0x1ec>)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a22:	4b6e      	ldr	r3, [pc, #440]	; (8009bdc <HAL_RCC_ClockConfig+0x1ec>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d001      	beq.n	8009a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e0cf      	b.n	8009bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 0302 	and.w	r3, r3, #2
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d010      	beq.n	8009a62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	4b66      	ldr	r3, [pc, #408]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d908      	bls.n	8009a62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a50:	4b63      	ldr	r3, [pc, #396]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	4960      	ldr	r1, [pc, #384]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d04c      	beq.n	8009b08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d107      	bne.n	8009a86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a76:	4b5a      	ldr	r3, [pc, #360]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d121      	bne.n	8009ac6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e0a6      	b.n	8009bd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d107      	bne.n	8009a9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a8e:	4b54      	ldr	r3, [pc, #336]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d115      	bne.n	8009ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e09a      	b.n	8009bd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d107      	bne.n	8009ab6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009aa6:	4b4e      	ldr	r3, [pc, #312]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d109      	bne.n	8009ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e08e      	b.n	8009bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ab6:	4b4a      	ldr	r3, [pc, #296]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e086      	b.n	8009bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ac6:	4b46      	ldr	r3, [pc, #280]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f023 0203 	bic.w	r2, r3, #3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	4943      	ldr	r1, [pc, #268]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ad8:	f7ff f84c 	bl	8008b74 <HAL_GetTick>
 8009adc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ade:	e00a      	b.n	8009af6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ae0:	f7ff f848 	bl	8008b74 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d901      	bls.n	8009af6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e06e      	b.n	8009bd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009af6:	4b3a      	ldr	r3, [pc, #232]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f003 020c 	and.w	r2, r3, #12
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d1eb      	bne.n	8009ae0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d010      	beq.n	8009b36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	4b31      	ldr	r3, [pc, #196]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d208      	bcs.n	8009b36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b24:	4b2e      	ldr	r3, [pc, #184]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	492b      	ldr	r1, [pc, #172]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009b32:	4313      	orrs	r3, r2
 8009b34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b36:	4b29      	ldr	r3, [pc, #164]	; (8009bdc <HAL_RCC_ClockConfig+0x1ec>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d210      	bcs.n	8009b66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b44:	4b25      	ldr	r3, [pc, #148]	; (8009bdc <HAL_RCC_ClockConfig+0x1ec>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f023 0207 	bic.w	r2, r3, #7
 8009b4c:	4923      	ldr	r1, [pc, #140]	; (8009bdc <HAL_RCC_ClockConfig+0x1ec>)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b54:	4b21      	ldr	r3, [pc, #132]	; (8009bdc <HAL_RCC_ClockConfig+0x1ec>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0307 	and.w	r3, r3, #7
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d001      	beq.n	8009b66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e036      	b.n	8009bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0304 	and.w	r3, r3, #4
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d008      	beq.n	8009b84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b72:	4b1b      	ldr	r3, [pc, #108]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	4918      	ldr	r1, [pc, #96]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009b80:	4313      	orrs	r3, r2
 8009b82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0308 	and.w	r3, r3, #8
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d009      	beq.n	8009ba4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b90:	4b13      	ldr	r3, [pc, #76]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	4910      	ldr	r1, [pc, #64]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009ba4:	f000 f824 	bl	8009bf0 <HAL_RCC_GetSysClockFreq>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	4b0d      	ldr	r3, [pc, #52]	; (8009be0 <HAL_RCC_ClockConfig+0x1f0>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	091b      	lsrs	r3, r3, #4
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	490b      	ldr	r1, [pc, #44]	; (8009be4 <HAL_RCC_ClockConfig+0x1f4>)
 8009bb6:	5ccb      	ldrb	r3, [r1, r3]
 8009bb8:	f003 031f 	and.w	r3, r3, #31
 8009bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc0:	4a09      	ldr	r2, [pc, #36]	; (8009be8 <HAL_RCC_ClockConfig+0x1f8>)
 8009bc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009bc4:	4b09      	ldr	r3, [pc, #36]	; (8009bec <HAL_RCC_ClockConfig+0x1fc>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7fe ff83 	bl	8008ad4 <HAL_InitTick>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8009bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	40022000 	.word	0x40022000
 8009be0:	40021000 	.word	0x40021000
 8009be4:	0800c234 	.word	0x0800c234
 8009be8:	20000000 	.word	0x20000000
 8009bec:	20000004 	.word	0x20000004

08009bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b089      	sub	sp, #36	; 0x24
 8009bf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61fb      	str	r3, [r7, #28]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bfe:	4b3e      	ldr	r3, [pc, #248]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f003 030c 	and.w	r3, r3, #12
 8009c06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c08:	4b3b      	ldr	r3, [pc, #236]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	f003 0303 	and.w	r3, r3, #3
 8009c10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d005      	beq.n	8009c24 <HAL_RCC_GetSysClockFreq+0x34>
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	2b0c      	cmp	r3, #12
 8009c1c:	d121      	bne.n	8009c62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d11e      	bne.n	8009c62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009c24:	4b34      	ldr	r3, [pc, #208]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0308 	and.w	r3, r3, #8
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d107      	bne.n	8009c40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009c30:	4b31      	ldr	r3, [pc, #196]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	f003 030f 	and.w	r3, r3, #15
 8009c3c:	61fb      	str	r3, [r7, #28]
 8009c3e:	e005      	b.n	8009c4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009c40:	4b2d      	ldr	r3, [pc, #180]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	091b      	lsrs	r3, r3, #4
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009c4c:	4a2b      	ldr	r2, [pc, #172]	; (8009cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10d      	bne.n	8009c78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c60:	e00a      	b.n	8009c78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d102      	bne.n	8009c6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009c68:	4b25      	ldr	r3, [pc, #148]	; (8009d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8009c6a:	61bb      	str	r3, [r7, #24]
 8009c6c:	e004      	b.n	8009c78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d101      	bne.n	8009c78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009c74:	4b23      	ldr	r3, [pc, #140]	; (8009d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8009c76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	2b0c      	cmp	r3, #12
 8009c7c:	d134      	bne.n	8009ce8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c7e:	4b1e      	ldr	r3, [pc, #120]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f003 0303 	and.w	r3, r3, #3
 8009c86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d003      	beq.n	8009c96 <HAL_RCC_GetSysClockFreq+0xa6>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b03      	cmp	r3, #3
 8009c92:	d003      	beq.n	8009c9c <HAL_RCC_GetSysClockFreq+0xac>
 8009c94:	e005      	b.n	8009ca2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009c96:	4b1a      	ldr	r3, [pc, #104]	; (8009d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8009c98:	617b      	str	r3, [r7, #20]
      break;
 8009c9a:	e005      	b.n	8009ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009c9c:	4b19      	ldr	r3, [pc, #100]	; (8009d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8009c9e:	617b      	str	r3, [r7, #20]
      break;
 8009ca0:	e002      	b.n	8009ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	617b      	str	r3, [r7, #20]
      break;
 8009ca6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009ca8:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	091b      	lsrs	r3, r3, #4
 8009cae:	f003 0307 	and.w	r3, r3, #7
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009cb6:	4b10      	ldr	r3, [pc, #64]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	0a1b      	lsrs	r3, r3, #8
 8009cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	fb03 f202 	mul.w	r2, r3, r2
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ccc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009cce:	4b0a      	ldr	r3, [pc, #40]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	0e5b      	lsrs	r3, r3, #25
 8009cd4:	f003 0303 	and.w	r3, r3, #3
 8009cd8:	3301      	adds	r3, #1
 8009cda:	005b      	lsls	r3, r3, #1
 8009cdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009ce8:	69bb      	ldr	r3, [r7, #24]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3724      	adds	r7, #36	; 0x24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40021000 	.word	0x40021000
 8009cfc:	0800c24c 	.word	0x0800c24c
 8009d00:	00f42400 	.word	0x00f42400
 8009d04:	007a1200 	.word	0x007a1200

08009d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d0c:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	20000000 	.word	0x20000000

08009d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009d24:	f7ff fff0 	bl	8009d08 <HAL_RCC_GetHCLKFreq>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	4b06      	ldr	r3, [pc, #24]	; (8009d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	0a1b      	lsrs	r3, r3, #8
 8009d30:	f003 0307 	and.w	r3, r3, #7
 8009d34:	4904      	ldr	r1, [pc, #16]	; (8009d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d36:	5ccb      	ldrb	r3, [r1, r3]
 8009d38:	f003 031f 	and.w	r3, r3, #31
 8009d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	40021000 	.word	0x40021000
 8009d48:	0800c244 	.word	0x0800c244

08009d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009d50:	f7ff ffda 	bl	8009d08 <HAL_RCC_GetHCLKFreq>
 8009d54:	4602      	mov	r2, r0
 8009d56:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	0adb      	lsrs	r3, r3, #11
 8009d5c:	f003 0307 	and.w	r3, r3, #7
 8009d60:	4904      	ldr	r1, [pc, #16]	; (8009d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d62:	5ccb      	ldrb	r3, [r1, r3]
 8009d64:	f003 031f 	and.w	r3, r3, #31
 8009d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	40021000 	.word	0x40021000
 8009d74:	0800c244 	.word	0x0800c244

08009d78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009d80:	2300      	movs	r3, #0
 8009d82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009d84:	4b2a      	ldr	r3, [pc, #168]	; (8009e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d003      	beq.n	8009d98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009d90:	f7ff f9b0 	bl	80090f4 <HAL_PWREx_GetVoltageRange>
 8009d94:	6178      	str	r0, [r7, #20]
 8009d96:	e014      	b.n	8009dc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009d98:	4b25      	ldr	r3, [pc, #148]	; (8009e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d9c:	4a24      	ldr	r2, [pc, #144]	; (8009e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009da2:	6593      	str	r3, [r2, #88]	; 0x58
 8009da4:	4b22      	ldr	r3, [pc, #136]	; (8009e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009db0:	f7ff f9a0 	bl	80090f4 <HAL_PWREx_GetVoltageRange>
 8009db4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009db6:	4b1e      	ldr	r3, [pc, #120]	; (8009e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dba:	4a1d      	ldr	r2, [pc, #116]	; (8009e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dc8:	d10b      	bne.n	8009de2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b80      	cmp	r3, #128	; 0x80
 8009dce:	d919      	bls.n	8009e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2ba0      	cmp	r3, #160	; 0xa0
 8009dd4:	d902      	bls.n	8009ddc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	613b      	str	r3, [r7, #16]
 8009dda:	e013      	b.n	8009e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009ddc:	2301      	movs	r3, #1
 8009dde:	613b      	str	r3, [r7, #16]
 8009de0:	e010      	b.n	8009e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b80      	cmp	r3, #128	; 0x80
 8009de6:	d902      	bls.n	8009dee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009de8:	2303      	movs	r3, #3
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	e00a      	b.n	8009e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b80      	cmp	r3, #128	; 0x80
 8009df2:	d102      	bne.n	8009dfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009df4:	2302      	movs	r3, #2
 8009df6:	613b      	str	r3, [r7, #16]
 8009df8:	e004      	b.n	8009e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b70      	cmp	r3, #112	; 0x70
 8009dfe:	d101      	bne.n	8009e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009e00:	2301      	movs	r3, #1
 8009e02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009e04:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f023 0207 	bic.w	r2, r3, #7
 8009e0c:	4909      	ldr	r1, [pc, #36]	; (8009e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009e14:	4b07      	ldr	r3, [pc, #28]	; (8009e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0307 	and.w	r3, r3, #7
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d001      	beq.n	8009e26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e000      	b.n	8009e28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	40021000 	.word	0x40021000
 8009e34:	40022000 	.word	0x40022000

08009e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e40:	2300      	movs	r3, #0
 8009e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e44:	2300      	movs	r3, #0
 8009e46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d041      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009e5c:	d02a      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009e5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009e62:	d824      	bhi.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e68:	d008      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e6e:	d81e      	bhi.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00a      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e78:	d010      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e7a:	e018      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009e7c:	4b86      	ldr	r3, [pc, #536]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	4a85      	ldr	r2, [pc, #532]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009e88:	e015      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	2100      	movs	r1, #0
 8009e90:	4618      	mov	r0, r3
 8009e92:	f000 facd 	bl	800a430 <RCCEx_PLLSAI1_Config>
 8009e96:	4603      	mov	r3, r0
 8009e98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009e9a:	e00c      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	3320      	adds	r3, #32
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 fbb6 	bl	800a614 <RCCEx_PLLSAI2_Config>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009eac:	e003      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	74fb      	strb	r3, [r7, #19]
      break;
 8009eb2:	e000      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eb6:	7cfb      	ldrb	r3, [r7, #19]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10b      	bne.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ebc:	4b76      	ldr	r3, [pc, #472]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eca:	4973      	ldr	r1, [pc, #460]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009ed2:	e001      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed4:	7cfb      	ldrb	r3, [r7, #19]
 8009ed6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d041      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ee8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009eec:	d02a      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009eee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ef2:	d824      	bhi.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ef8:	d008      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009efe:	d81e      	bhi.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00a      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f08:	d010      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009f0a:	e018      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009f0c:	4b62      	ldr	r3, [pc, #392]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	4a61      	ldr	r2, [pc, #388]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f18:	e015      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	2100      	movs	r1, #0
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 fa85 	bl	800a430 <RCCEx_PLLSAI1_Config>
 8009f26:	4603      	mov	r3, r0
 8009f28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f2a:	e00c      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3320      	adds	r3, #32
 8009f30:	2100      	movs	r1, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fb6e 	bl	800a614 <RCCEx_PLLSAI2_Config>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f3c:	e003      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	74fb      	strb	r3, [r7, #19]
      break;
 8009f42:	e000      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f46:	7cfb      	ldrb	r3, [r7, #19]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10b      	bne.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009f4c:	4b52      	ldr	r3, [pc, #328]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f5a:	494f      	ldr	r1, [pc, #316]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009f62:	e001      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f64:	7cfb      	ldrb	r3, [r7, #19]
 8009f66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 80a0 	beq.w	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f76:	2300      	movs	r3, #0
 8009f78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009f7a:	4b47      	ldr	r3, [pc, #284]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009f86:	2301      	movs	r3, #1
 8009f88:	e000      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00d      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f90:	4b41      	ldr	r3, [pc, #260]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f94:	4a40      	ldr	r2, [pc, #256]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8009f9c:	4b3e      	ldr	r3, [pc, #248]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fa4:	60bb      	str	r3, [r7, #8]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009fac:	4b3b      	ldr	r3, [pc, #236]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a3a      	ldr	r2, [pc, #232]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fb8:	f7fe fddc 	bl	8008b74 <HAL_GetTick>
 8009fbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009fbe:	e009      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fc0:	f7fe fdd8 	bl	8008b74 <HAL_GetTick>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	d902      	bls.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	74fb      	strb	r3, [r7, #19]
        break;
 8009fd2:	e005      	b.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009fd4:	4b31      	ldr	r3, [pc, #196]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d0ef      	beq.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009fe0:	7cfb      	ldrb	r3, [r7, #19]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d15c      	bne.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009fe6:	4b2c      	ldr	r3, [pc, #176]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ff0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d01f      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	429a      	cmp	r2, r3
 800a002:	d019      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a004:	4b24      	ldr	r3, [pc, #144]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a00a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a00e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a010:	4b21      	ldr	r3, [pc, #132]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a016:	4a20      	ldr	r2, [pc, #128]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a01c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a020:	4b1d      	ldr	r3, [pc, #116]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a026:	4a1c      	ldr	r2, [pc, #112]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a02c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a030:	4a19      	ldr	r2, [pc, #100]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d016      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a042:	f7fe fd97 	bl	8008b74 <HAL_GetTick>
 800a046:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a048:	e00b      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a04a:	f7fe fd93 	bl	8008b74 <HAL_GetTick>
 800a04e:	4602      	mov	r2, r0
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	f241 3288 	movw	r2, #5000	; 0x1388
 800a058:	4293      	cmp	r3, r2
 800a05a:	d902      	bls.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	74fb      	strb	r3, [r7, #19]
            break;
 800a060:	e006      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a062:	4b0d      	ldr	r3, [pc, #52]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d0ec      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a070:	7cfb      	ldrb	r3, [r7, #19]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10c      	bne.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a076:	4b08      	ldr	r3, [pc, #32]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a07c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a086:	4904      	ldr	r1, [pc, #16]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a08e:	e009      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a090:	7cfb      	ldrb	r3, [r7, #19]
 800a092:	74bb      	strb	r3, [r7, #18]
 800a094:	e006      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a096:	bf00      	nop
 800a098:	40021000 	.word	0x40021000
 800a09c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a0:	7cfb      	ldrb	r3, [r7, #19]
 800a0a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a0a4:	7c7b      	ldrb	r3, [r7, #17]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d105      	bne.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0aa:	4ba6      	ldr	r3, [pc, #664]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ae:	4aa5      	ldr	r2, [pc, #660]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a0b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00a      	beq.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a0c2:	4ba0      	ldr	r3, [pc, #640]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c8:	f023 0203 	bic.w	r2, r3, #3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d0:	499c      	ldr	r1, [pc, #624]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0302 	and.w	r3, r3, #2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00a      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a0e4:	4b97      	ldr	r3, [pc, #604]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ea:	f023 020c 	bic.w	r2, r3, #12
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f2:	4994      	ldr	r1, [pc, #592]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0304 	and.w	r3, r3, #4
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a106:	4b8f      	ldr	r3, [pc, #572]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a114:	498b      	ldr	r1, [pc, #556]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a116:	4313      	orrs	r3, r2
 800a118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0308 	and.w	r3, r3, #8
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00a      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a128:	4b86      	ldr	r3, [pc, #536]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a12e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a136:	4983      	ldr	r1, [pc, #524]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a138:	4313      	orrs	r3, r2
 800a13a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0310 	and.w	r3, r3, #16
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a14a:	4b7e      	ldr	r3, [pc, #504]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a158:	497a      	ldr	r1, [pc, #488]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0320 	and.w	r3, r3, #32
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00a      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a16c:	4b75      	ldr	r3, [pc, #468]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a172:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a17a:	4972      	ldr	r1, [pc, #456]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a17c:	4313      	orrs	r3, r2
 800a17e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a18e:	4b6d      	ldr	r3, [pc, #436]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a194:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a19c:	4969      	ldr	r1, [pc, #420]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00a      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a1b0:	4b64      	ldr	r3, [pc, #400]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1be:	4961      	ldr	r1, [pc, #388]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00a      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a1d2:	4b5c      	ldr	r3, [pc, #368]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a1d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1e0:	4958      	ldr	r1, [pc, #352]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00a      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a1f4:	4b53      	ldr	r3, [pc, #332]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a202:	4950      	ldr	r1, [pc, #320]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a204:	4313      	orrs	r3, r2
 800a206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00a      	beq.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a216:	4b4b      	ldr	r3, [pc, #300]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a224:	4947      	ldr	r1, [pc, #284]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a226:	4313      	orrs	r3, r2
 800a228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a238:	4b42      	ldr	r3, [pc, #264]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a23a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a23e:	f023 0203 	bic.w	r2, r3, #3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a246:	493f      	ldr	r1, [pc, #252]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d028      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a25a:	4b3a      	ldr	r3, [pc, #232]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a260:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a268:	4936      	ldr	r1, [pc, #216]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a26a:	4313      	orrs	r3, r2
 800a26c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a278:	d106      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a27a:	4b32      	ldr	r3, [pc, #200]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	4a31      	ldr	r2, [pc, #196]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a284:	60d3      	str	r3, [r2, #12]
 800a286:	e011      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a290:	d10c      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3304      	adds	r3, #4
 800a296:	2101      	movs	r1, #1
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 f8c9 	bl	800a430 <RCCEx_PLLSAI1_Config>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a2a2:	7cfb      	ldrb	r3, [r7, #19]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800a2a8:	7cfb      	ldrb	r3, [r7, #19]
 800a2aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d028      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a2b8:	4b22      	ldr	r3, [pc, #136]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2c6:	491f      	ldr	r1, [pc, #124]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2d6:	d106      	bne.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a2d8:	4b1a      	ldr	r3, [pc, #104]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	4a19      	ldr	r2, [pc, #100]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2e2:	60d3      	str	r3, [r2, #12]
 800a2e4:	e011      	b.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2ee:	d10c      	bne.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 f89a 	bl	800a430 <RCCEx_PLLSAI1_Config>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a300:	7cfb      	ldrb	r3, [r7, #19]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800a306:	7cfb      	ldrb	r3, [r7, #19]
 800a308:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d02a      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a316:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a31c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a324:	4907      	ldr	r1, [pc, #28]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a326:	4313      	orrs	r3, r2
 800a328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a334:	d108      	bne.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a336:	4b03      	ldr	r3, [pc, #12]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	4a02      	ldr	r2, [pc, #8]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a33c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a340:	60d3      	str	r3, [r2, #12]
 800a342:	e013      	b.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x534>
 800a344:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a34c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a350:	d10c      	bne.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	3304      	adds	r3, #4
 800a356:	2101      	movs	r1, #1
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 f869 	bl	800a430 <RCCEx_PLLSAI1_Config>
 800a35e:	4603      	mov	r3, r0
 800a360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a362:	7cfb      	ldrb	r3, [r7, #19]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800a368:	7cfb      	ldrb	r3, [r7, #19]
 800a36a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a374:	2b00      	cmp	r3, #0
 800a376:	d02f      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a378:	4b2c      	ldr	r3, [pc, #176]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a37e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a386:	4929      	ldr	r1, [pc, #164]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a396:	d10d      	bne.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3304      	adds	r3, #4
 800a39c:	2102      	movs	r1, #2
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 f846 	bl	800a430 <RCCEx_PLLSAI1_Config>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a3a8:	7cfb      	ldrb	r3, [r7, #19]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d014      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800a3ae:	7cfb      	ldrb	r3, [r7, #19]
 800a3b0:	74bb      	strb	r3, [r7, #18]
 800a3b2:	e011      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3bc:	d10c      	bne.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3320      	adds	r3, #32
 800a3c2:	2102      	movs	r1, #2
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 f925 	bl	800a614 <RCCEx_PLLSAI2_Config>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a3ce:	7cfb      	ldrb	r3, [r7, #19]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800a3d4:	7cfb      	ldrb	r3, [r7, #19]
 800a3d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00b      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a3e4:	4b11      	ldr	r3, [pc, #68]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3f4:	490d      	ldr	r1, [pc, #52]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00b      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a408:	4b08      	ldr	r3, [pc, #32]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a40e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a418:	4904      	ldr	r1, [pc, #16]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a420:	7cbb      	ldrb	r3, [r7, #18]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	40021000 	.word	0x40021000

0800a430 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a43e:	4b74      	ldr	r3, [pc, #464]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	f003 0303 	and.w	r3, r3, #3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d018      	beq.n	800a47c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a44a:	4b71      	ldr	r3, [pc, #452]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	f003 0203 	and.w	r2, r3, #3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	429a      	cmp	r2, r3
 800a458:	d10d      	bne.n	800a476 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
       ||
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d009      	beq.n	800a476 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a462:	4b6b      	ldr	r3, [pc, #428]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	091b      	lsrs	r3, r3, #4
 800a468:	f003 0307 	and.w	r3, r3, #7
 800a46c:	1c5a      	adds	r2, r3, #1
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
       ||
 800a472:	429a      	cmp	r2, r3
 800a474:	d047      	beq.n	800a506 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	73fb      	strb	r3, [r7, #15]
 800a47a:	e044      	b.n	800a506 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b03      	cmp	r3, #3
 800a482:	d018      	beq.n	800a4b6 <RCCEx_PLLSAI1_Config+0x86>
 800a484:	2b03      	cmp	r3, #3
 800a486:	d825      	bhi.n	800a4d4 <RCCEx_PLLSAI1_Config+0xa4>
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d002      	beq.n	800a492 <RCCEx_PLLSAI1_Config+0x62>
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d009      	beq.n	800a4a4 <RCCEx_PLLSAI1_Config+0x74>
 800a490:	e020      	b.n	800a4d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a492:	4b5f      	ldr	r3, [pc, #380]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 0302 	and.w	r3, r3, #2
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d11d      	bne.n	800a4da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4a2:	e01a      	b.n	800a4da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a4a4:	4b5a      	ldr	r3, [pc, #360]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d116      	bne.n	800a4de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4b4:	e013      	b.n	800a4de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a4b6:	4b56      	ldr	r3, [pc, #344]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10f      	bne.n	800a4e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a4c2:	4b53      	ldr	r3, [pc, #332]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d109      	bne.n	800a4e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a4d2:	e006      	b.n	800a4e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4d8:	e004      	b.n	800a4e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4da:	bf00      	nop
 800a4dc:	e002      	b.n	800a4e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4de:	bf00      	nop
 800a4e0:	e000      	b.n	800a4e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4e2:	bf00      	nop
    }

    if(status == HAL_OK)
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10d      	bne.n	800a506 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a4ea:	4b49      	ldr	r3, [pc, #292]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6819      	ldr	r1, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	011b      	lsls	r3, r3, #4
 800a4fe:	430b      	orrs	r3, r1
 800a500:	4943      	ldr	r1, [pc, #268]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a502:	4313      	orrs	r3, r2
 800a504:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d17c      	bne.n	800a606 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a50c:	4b40      	ldr	r3, [pc, #256]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a3f      	ldr	r2, [pc, #252]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a512:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a518:	f7fe fb2c 	bl	8008b74 <HAL_GetTick>
 800a51c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a51e:	e009      	b.n	800a534 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a520:	f7fe fb28 	bl	8008b74 <HAL_GetTick>
 800a524:	4602      	mov	r2, r0
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d902      	bls.n	800a534 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	73fb      	strb	r3, [r7, #15]
        break;
 800a532:	e005      	b.n	800a540 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a534:	4b36      	ldr	r3, [pc, #216]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1ef      	bne.n	800a520 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d15f      	bne.n	800a606 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d110      	bne.n	800a56e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a54c:	4b30      	ldr	r3, [pc, #192]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a554:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	6892      	ldr	r2, [r2, #8]
 800a55c:	0211      	lsls	r1, r2, #8
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	68d2      	ldr	r2, [r2, #12]
 800a562:	06d2      	lsls	r2, r2, #27
 800a564:	430a      	orrs	r2, r1
 800a566:	492a      	ldr	r1, [pc, #168]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	610b      	str	r3, [r1, #16]
 800a56c:	e027      	b.n	800a5be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d112      	bne.n	800a59a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a574:	4b26      	ldr	r3, [pc, #152]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a57c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	6892      	ldr	r2, [r2, #8]
 800a584:	0211      	lsls	r1, r2, #8
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	6912      	ldr	r2, [r2, #16]
 800a58a:	0852      	lsrs	r2, r2, #1
 800a58c:	3a01      	subs	r2, #1
 800a58e:	0552      	lsls	r2, r2, #21
 800a590:	430a      	orrs	r2, r1
 800a592:	491f      	ldr	r1, [pc, #124]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a594:	4313      	orrs	r3, r2
 800a596:	610b      	str	r3, [r1, #16]
 800a598:	e011      	b.n	800a5be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a59a:	4b1d      	ldr	r3, [pc, #116]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a5a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	6892      	ldr	r2, [r2, #8]
 800a5aa:	0211      	lsls	r1, r2, #8
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	6952      	ldr	r2, [r2, #20]
 800a5b0:	0852      	lsrs	r2, r2, #1
 800a5b2:	3a01      	subs	r2, #1
 800a5b4:	0652      	lsls	r2, r2, #25
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	4915      	ldr	r1, [pc, #84]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a5be:	4b14      	ldr	r3, [pc, #80]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a13      	ldr	r2, [pc, #76]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a5c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5ca:	f7fe fad3 	bl	8008b74 <HAL_GetTick>
 800a5ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a5d0:	e009      	b.n	800a5e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a5d2:	f7fe facf 	bl	8008b74 <HAL_GetTick>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	1ad3      	subs	r3, r2, r3
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d902      	bls.n	800a5e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	73fb      	strb	r3, [r7, #15]
          break;
 800a5e4:	e005      	b.n	800a5f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a5e6:	4b0a      	ldr	r3, [pc, #40]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0ef      	beq.n	800a5d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d106      	bne.n	800a606 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a5f8:	4b05      	ldr	r3, [pc, #20]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5fa:	691a      	ldr	r2, [r3, #16]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	4903      	ldr	r1, [pc, #12]	; (800a610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a602:	4313      	orrs	r3, r2
 800a604:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	40021000 	.word	0x40021000

0800a614 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a622:	4b69      	ldr	r3, [pc, #420]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	f003 0303 	and.w	r3, r3, #3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d018      	beq.n	800a660 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a62e:	4b66      	ldr	r3, [pc, #408]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	f003 0203 	and.w	r2, r3, #3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d10d      	bne.n	800a65a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
       ||
 800a642:	2b00      	cmp	r3, #0
 800a644:	d009      	beq.n	800a65a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a646:	4b60      	ldr	r3, [pc, #384]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	091b      	lsrs	r3, r3, #4
 800a64c:	f003 0307 	and.w	r3, r3, #7
 800a650:	1c5a      	adds	r2, r3, #1
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685b      	ldr	r3, [r3, #4]
       ||
 800a656:	429a      	cmp	r2, r3
 800a658:	d047      	beq.n	800a6ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	73fb      	strb	r3, [r7, #15]
 800a65e:	e044      	b.n	800a6ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b03      	cmp	r3, #3
 800a666:	d018      	beq.n	800a69a <RCCEx_PLLSAI2_Config+0x86>
 800a668:	2b03      	cmp	r3, #3
 800a66a:	d825      	bhi.n	800a6b8 <RCCEx_PLLSAI2_Config+0xa4>
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d002      	beq.n	800a676 <RCCEx_PLLSAI2_Config+0x62>
 800a670:	2b02      	cmp	r3, #2
 800a672:	d009      	beq.n	800a688 <RCCEx_PLLSAI2_Config+0x74>
 800a674:	e020      	b.n	800a6b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a676:	4b54      	ldr	r3, [pc, #336]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d11d      	bne.n	800a6be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a686:	e01a      	b.n	800a6be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a688:	4b4f      	ldr	r3, [pc, #316]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a690:	2b00      	cmp	r3, #0
 800a692:	d116      	bne.n	800a6c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a698:	e013      	b.n	800a6c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a69a:	4b4b      	ldr	r3, [pc, #300]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10f      	bne.n	800a6c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a6a6:	4b48      	ldr	r3, [pc, #288]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d109      	bne.n	800a6c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6b6:	e006      	b.n	800a6c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a6bc:	e004      	b.n	800a6c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6be:	bf00      	nop
 800a6c0:	e002      	b.n	800a6c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6c2:	bf00      	nop
 800a6c4:	e000      	b.n	800a6c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6c6:	bf00      	nop
    }

    if(status == HAL_OK)
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10d      	bne.n	800a6ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a6ce:	4b3e      	ldr	r3, [pc, #248]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6819      	ldr	r1, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	011b      	lsls	r3, r3, #4
 800a6e2:	430b      	orrs	r3, r1
 800a6e4:	4938      	ldr	r1, [pc, #224]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d166      	bne.n	800a7be <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a6f0:	4b35      	ldr	r3, [pc, #212]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a34      	ldr	r2, [pc, #208]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6fc:	f7fe fa3a 	bl	8008b74 <HAL_GetTick>
 800a700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a702:	e009      	b.n	800a718 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a704:	f7fe fa36 	bl	8008b74 <HAL_GetTick>
 800a708:	4602      	mov	r2, r0
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d902      	bls.n	800a718 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	73fb      	strb	r3, [r7, #15]
        break;
 800a716:	e005      	b.n	800a724 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a718:	4b2b      	ldr	r3, [pc, #172]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1ef      	bne.n	800a704 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d149      	bne.n	800a7be <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d110      	bne.n	800a752 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a730:	4b25      	ldr	r3, [pc, #148]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a738:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	6892      	ldr	r2, [r2, #8]
 800a740:	0211      	lsls	r1, r2, #8
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	68d2      	ldr	r2, [r2, #12]
 800a746:	06d2      	lsls	r2, r2, #27
 800a748:	430a      	orrs	r2, r1
 800a74a:	491f      	ldr	r1, [pc, #124]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a74c:	4313      	orrs	r3, r2
 800a74e:	614b      	str	r3, [r1, #20]
 800a750:	e011      	b.n	800a776 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a752:	4b1d      	ldr	r3, [pc, #116]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a75a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6892      	ldr	r2, [r2, #8]
 800a762:	0211      	lsls	r1, r2, #8
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	6912      	ldr	r2, [r2, #16]
 800a768:	0852      	lsrs	r2, r2, #1
 800a76a:	3a01      	subs	r2, #1
 800a76c:	0652      	lsls	r2, r2, #25
 800a76e:	430a      	orrs	r2, r1
 800a770:	4915      	ldr	r1, [pc, #84]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a772:	4313      	orrs	r3, r2
 800a774:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a776:	4b14      	ldr	r3, [pc, #80]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a13      	ldr	r2, [pc, #76]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a77c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a780:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a782:	f7fe f9f7 	bl	8008b74 <HAL_GetTick>
 800a786:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a788:	e009      	b.n	800a79e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a78a:	f7fe f9f3 	bl	8008b74 <HAL_GetTick>
 800a78e:	4602      	mov	r2, r0
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	2b02      	cmp	r3, #2
 800a796:	d902      	bls.n	800a79e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	73fb      	strb	r3, [r7, #15]
          break;
 800a79c:	e005      	b.n	800a7aa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a79e:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0ef      	beq.n	800a78a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d106      	bne.n	800a7be <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a7b0:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7b2:	695a      	ldr	r2, [r3, #20]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	4903      	ldr	r1, [pc, #12]	; (800a7c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	40021000 	.word	0x40021000

0800a7cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d101      	bne.n	800a7de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e040      	b.n	800a860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d106      	bne.n	800a7f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7fd ffec 	bl	80087cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2224      	movs	r2, #36	; 0x24
 800a7f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 0201 	bic.w	r2, r2, #1
 800a808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f8c0 	bl	800a990 <UART_SetConfig>
 800a810:	4603      	mov	r3, r0
 800a812:	2b01      	cmp	r3, #1
 800a814:	d101      	bne.n	800a81a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e022      	b.n	800a860 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fb6c 	bl	800af00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689a      	ldr	r2, [r3, #8]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f042 0201 	orr.w	r2, r2, #1
 800a856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fbf3 	bl	800b044 <UART_CheckIdleState>
 800a85e:	4603      	mov	r3, r0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08a      	sub	sp, #40	; 0x28
 800a86c:	af02      	add	r7, sp, #8
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	603b      	str	r3, [r7, #0]
 800a874:	4613      	mov	r3, r2
 800a876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a87c:	2b20      	cmp	r3, #32
 800a87e:	f040 8082 	bne.w	800a986 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <HAL_UART_Transmit+0x26>
 800a888:	88fb      	ldrh	r3, [r7, #6]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e07a      	b.n	800a988 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d101      	bne.n	800a8a0 <HAL_UART_Transmit+0x38>
 800a89c:	2302      	movs	r3, #2
 800a89e:	e073      	b.n	800a988 <HAL_UART_Transmit+0x120>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2221      	movs	r2, #33	; 0x21
 800a8b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8b6:	f7fe f95d 	bl	8008b74 <HAL_GetTick>
 800a8ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	88fa      	ldrh	r2, [r7, #6]
 800a8c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	88fa      	ldrh	r2, [r7, #6]
 800a8c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8d4:	d108      	bne.n	800a8e8 <HAL_UART_Transmit+0x80>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d104      	bne.n	800a8e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	61bb      	str	r3, [r7, #24]
 800a8e6:	e003      	b.n	800a8f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a8f8:	e02d      	b.n	800a956 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2200      	movs	r2, #0
 800a902:	2180      	movs	r1, #128	; 0x80
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f000 fbe6 	bl	800b0d6 <UART_WaitOnFlagUntilTimeout>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e039      	b.n	800a988 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10b      	bne.n	800a932 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	881a      	ldrh	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a926:	b292      	uxth	r2, r2
 800a928:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	3302      	adds	r3, #2
 800a92e:	61bb      	str	r3, [r7, #24]
 800a930:	e008      	b.n	800a944 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	781a      	ldrb	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	b292      	uxth	r2, r2
 800a93c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	3301      	adds	r3, #1
 800a942:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	3b01      	subs	r3, #1
 800a94e:	b29a      	uxth	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1cb      	bne.n	800a8fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2200      	movs	r2, #0
 800a96a:	2140      	movs	r1, #64	; 0x40
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f000 fbb2 	bl	800b0d6 <UART_WaitOnFlagUntilTimeout>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d001      	beq.n	800a97c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a978:	2303      	movs	r3, #3
 800a97a:	e005      	b.n	800a988 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2220      	movs	r2, #32
 800a980:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	e000      	b.n	800a988 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a986:	2302      	movs	r3, #2
  }
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3720      	adds	r7, #32
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a994:	b08a      	sub	sp, #40	; 0x28
 800a996:	af00      	add	r7, sp, #0
 800a998:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	431a      	orrs	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	431a      	orrs	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	69db      	ldr	r3, [r3, #28]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	4ba4      	ldr	r3, [pc, #656]	; (800ac50 <UART_SetConfig+0x2c0>)
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	6812      	ldr	r2, [r2, #0]
 800a9c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9c8:	430b      	orrs	r3, r1
 800a9ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	68da      	ldr	r2, [r3, #12]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a99      	ldr	r2, [pc, #612]	; (800ac54 <UART_SetConfig+0x2c4>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d004      	beq.n	800a9fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a90      	ldr	r2, [pc, #576]	; (800ac58 <UART_SetConfig+0x2c8>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d126      	bne.n	800aa68 <UART_SetConfig+0xd8>
 800aa1a:	4b90      	ldr	r3, [pc, #576]	; (800ac5c <UART_SetConfig+0x2cc>)
 800aa1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa20:	f003 0303 	and.w	r3, r3, #3
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	d81b      	bhi.n	800aa60 <UART_SetConfig+0xd0>
 800aa28:	a201      	add	r2, pc, #4	; (adr r2, 800aa30 <UART_SetConfig+0xa0>)
 800aa2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2e:	bf00      	nop
 800aa30:	0800aa41 	.word	0x0800aa41
 800aa34:	0800aa51 	.word	0x0800aa51
 800aa38:	0800aa49 	.word	0x0800aa49
 800aa3c:	0800aa59 	.word	0x0800aa59
 800aa40:	2301      	movs	r3, #1
 800aa42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa46:	e116      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800aa48:	2302      	movs	r3, #2
 800aa4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa4e:	e112      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800aa50:	2304      	movs	r3, #4
 800aa52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa56:	e10e      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800aa58:	2308      	movs	r3, #8
 800aa5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa5e:	e10a      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800aa60:	2310      	movs	r3, #16
 800aa62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa66:	e106      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a7c      	ldr	r2, [pc, #496]	; (800ac60 <UART_SetConfig+0x2d0>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d138      	bne.n	800aae4 <UART_SetConfig+0x154>
 800aa72:	4b7a      	ldr	r3, [pc, #488]	; (800ac5c <UART_SetConfig+0x2cc>)
 800aa74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa78:	f003 030c 	and.w	r3, r3, #12
 800aa7c:	2b0c      	cmp	r3, #12
 800aa7e:	d82d      	bhi.n	800aadc <UART_SetConfig+0x14c>
 800aa80:	a201      	add	r2, pc, #4	; (adr r2, 800aa88 <UART_SetConfig+0xf8>)
 800aa82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa86:	bf00      	nop
 800aa88:	0800aabd 	.word	0x0800aabd
 800aa8c:	0800aadd 	.word	0x0800aadd
 800aa90:	0800aadd 	.word	0x0800aadd
 800aa94:	0800aadd 	.word	0x0800aadd
 800aa98:	0800aacd 	.word	0x0800aacd
 800aa9c:	0800aadd 	.word	0x0800aadd
 800aaa0:	0800aadd 	.word	0x0800aadd
 800aaa4:	0800aadd 	.word	0x0800aadd
 800aaa8:	0800aac5 	.word	0x0800aac5
 800aaac:	0800aadd 	.word	0x0800aadd
 800aab0:	0800aadd 	.word	0x0800aadd
 800aab4:	0800aadd 	.word	0x0800aadd
 800aab8:	0800aad5 	.word	0x0800aad5
 800aabc:	2300      	movs	r3, #0
 800aabe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aac2:	e0d8      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800aac4:	2302      	movs	r3, #2
 800aac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaca:	e0d4      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800aacc:	2304      	movs	r3, #4
 800aace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aad2:	e0d0      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800aad4:	2308      	movs	r3, #8
 800aad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aada:	e0cc      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800aadc:	2310      	movs	r3, #16
 800aade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aae2:	e0c8      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a5e      	ldr	r2, [pc, #376]	; (800ac64 <UART_SetConfig+0x2d4>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d125      	bne.n	800ab3a <UART_SetConfig+0x1aa>
 800aaee:	4b5b      	ldr	r3, [pc, #364]	; (800ac5c <UART_SetConfig+0x2cc>)
 800aaf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aaf8:	2b30      	cmp	r3, #48	; 0x30
 800aafa:	d016      	beq.n	800ab2a <UART_SetConfig+0x19a>
 800aafc:	2b30      	cmp	r3, #48	; 0x30
 800aafe:	d818      	bhi.n	800ab32 <UART_SetConfig+0x1a2>
 800ab00:	2b20      	cmp	r3, #32
 800ab02:	d00a      	beq.n	800ab1a <UART_SetConfig+0x18a>
 800ab04:	2b20      	cmp	r3, #32
 800ab06:	d814      	bhi.n	800ab32 <UART_SetConfig+0x1a2>
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <UART_SetConfig+0x182>
 800ab0c:	2b10      	cmp	r3, #16
 800ab0e:	d008      	beq.n	800ab22 <UART_SetConfig+0x192>
 800ab10:	e00f      	b.n	800ab32 <UART_SetConfig+0x1a2>
 800ab12:	2300      	movs	r3, #0
 800ab14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab18:	e0ad      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab20:	e0a9      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ab22:	2304      	movs	r3, #4
 800ab24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab28:	e0a5      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ab2a:	2308      	movs	r3, #8
 800ab2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab30:	e0a1      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ab32:	2310      	movs	r3, #16
 800ab34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab38:	e09d      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a4a      	ldr	r2, [pc, #296]	; (800ac68 <UART_SetConfig+0x2d8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d125      	bne.n	800ab90 <UART_SetConfig+0x200>
 800ab44:	4b45      	ldr	r3, [pc, #276]	; (800ac5c <UART_SetConfig+0x2cc>)
 800ab46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab4e:	2bc0      	cmp	r3, #192	; 0xc0
 800ab50:	d016      	beq.n	800ab80 <UART_SetConfig+0x1f0>
 800ab52:	2bc0      	cmp	r3, #192	; 0xc0
 800ab54:	d818      	bhi.n	800ab88 <UART_SetConfig+0x1f8>
 800ab56:	2b80      	cmp	r3, #128	; 0x80
 800ab58:	d00a      	beq.n	800ab70 <UART_SetConfig+0x1e0>
 800ab5a:	2b80      	cmp	r3, #128	; 0x80
 800ab5c:	d814      	bhi.n	800ab88 <UART_SetConfig+0x1f8>
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d002      	beq.n	800ab68 <UART_SetConfig+0x1d8>
 800ab62:	2b40      	cmp	r3, #64	; 0x40
 800ab64:	d008      	beq.n	800ab78 <UART_SetConfig+0x1e8>
 800ab66:	e00f      	b.n	800ab88 <UART_SetConfig+0x1f8>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab6e:	e082      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ab70:	2302      	movs	r3, #2
 800ab72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab76:	e07e      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ab78:	2304      	movs	r3, #4
 800ab7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab7e:	e07a      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ab80:	2308      	movs	r3, #8
 800ab82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab86:	e076      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ab88:	2310      	movs	r3, #16
 800ab8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab8e:	e072      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a35      	ldr	r2, [pc, #212]	; (800ac6c <UART_SetConfig+0x2dc>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d12a      	bne.n	800abf0 <UART_SetConfig+0x260>
 800ab9a:	4b30      	ldr	r3, [pc, #192]	; (800ac5c <UART_SetConfig+0x2cc>)
 800ab9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aba8:	d01a      	beq.n	800abe0 <UART_SetConfig+0x250>
 800abaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abae:	d81b      	bhi.n	800abe8 <UART_SetConfig+0x258>
 800abb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abb4:	d00c      	beq.n	800abd0 <UART_SetConfig+0x240>
 800abb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abba:	d815      	bhi.n	800abe8 <UART_SetConfig+0x258>
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d003      	beq.n	800abc8 <UART_SetConfig+0x238>
 800abc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abc4:	d008      	beq.n	800abd8 <UART_SetConfig+0x248>
 800abc6:	e00f      	b.n	800abe8 <UART_SetConfig+0x258>
 800abc8:	2300      	movs	r3, #0
 800abca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abce:	e052      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800abd0:	2302      	movs	r3, #2
 800abd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abd6:	e04e      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800abd8:	2304      	movs	r3, #4
 800abda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abde:	e04a      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800abe0:	2308      	movs	r3, #8
 800abe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abe6:	e046      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800abe8:	2310      	movs	r3, #16
 800abea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abee:	e042      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a17      	ldr	r2, [pc, #92]	; (800ac54 <UART_SetConfig+0x2c4>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d13a      	bne.n	800ac70 <UART_SetConfig+0x2e0>
 800abfa:	4b18      	ldr	r3, [pc, #96]	; (800ac5c <UART_SetConfig+0x2cc>)
 800abfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac08:	d01a      	beq.n	800ac40 <UART_SetConfig+0x2b0>
 800ac0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac0e:	d81b      	bhi.n	800ac48 <UART_SetConfig+0x2b8>
 800ac10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac14:	d00c      	beq.n	800ac30 <UART_SetConfig+0x2a0>
 800ac16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac1a:	d815      	bhi.n	800ac48 <UART_SetConfig+0x2b8>
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d003      	beq.n	800ac28 <UART_SetConfig+0x298>
 800ac20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac24:	d008      	beq.n	800ac38 <UART_SetConfig+0x2a8>
 800ac26:	e00f      	b.n	800ac48 <UART_SetConfig+0x2b8>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac2e:	e022      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ac30:	2302      	movs	r3, #2
 800ac32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac36:	e01e      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ac38:	2304      	movs	r3, #4
 800ac3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac3e:	e01a      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ac40:	2308      	movs	r3, #8
 800ac42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac46:	e016      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ac48:	2310      	movs	r3, #16
 800ac4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ac4e:	e012      	b.n	800ac76 <UART_SetConfig+0x2e6>
 800ac50:	efff69f3 	.word	0xefff69f3
 800ac54:	40008000 	.word	0x40008000
 800ac58:	40013800 	.word	0x40013800
 800ac5c:	40021000 	.word	0x40021000
 800ac60:	40004400 	.word	0x40004400
 800ac64:	40004800 	.word	0x40004800
 800ac68:	40004c00 	.word	0x40004c00
 800ac6c:	40005000 	.word	0x40005000
 800ac70:	2310      	movs	r3, #16
 800ac72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a9f      	ldr	r2, [pc, #636]	; (800aef8 <UART_SetConfig+0x568>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d17a      	bne.n	800ad76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac84:	2b08      	cmp	r3, #8
 800ac86:	d824      	bhi.n	800acd2 <UART_SetConfig+0x342>
 800ac88:	a201      	add	r2, pc, #4	; (adr r2, 800ac90 <UART_SetConfig+0x300>)
 800ac8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8e:	bf00      	nop
 800ac90:	0800acb5 	.word	0x0800acb5
 800ac94:	0800acd3 	.word	0x0800acd3
 800ac98:	0800acbd 	.word	0x0800acbd
 800ac9c:	0800acd3 	.word	0x0800acd3
 800aca0:	0800acc3 	.word	0x0800acc3
 800aca4:	0800acd3 	.word	0x0800acd3
 800aca8:	0800acd3 	.word	0x0800acd3
 800acac:	0800acd3 	.word	0x0800acd3
 800acb0:	0800accb 	.word	0x0800accb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acb4:	f7ff f834 	bl	8009d20 <HAL_RCC_GetPCLK1Freq>
 800acb8:	61f8      	str	r0, [r7, #28]
        break;
 800acba:	e010      	b.n	800acde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acbc:	4b8f      	ldr	r3, [pc, #572]	; (800aefc <UART_SetConfig+0x56c>)
 800acbe:	61fb      	str	r3, [r7, #28]
        break;
 800acc0:	e00d      	b.n	800acde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acc2:	f7fe ff95 	bl	8009bf0 <HAL_RCC_GetSysClockFreq>
 800acc6:	61f8      	str	r0, [r7, #28]
        break;
 800acc8:	e009      	b.n	800acde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acce:	61fb      	str	r3, [r7, #28]
        break;
 800acd0:	e005      	b.n	800acde <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800acd2:	2300      	movs	r3, #0
 800acd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800acdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 80fb 	beq.w	800aedc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	4613      	mov	r3, r2
 800acec:	005b      	lsls	r3, r3, #1
 800acee:	4413      	add	r3, r2
 800acf0:	69fa      	ldr	r2, [r7, #28]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d305      	bcc.n	800ad02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800acfc:	69fa      	ldr	r2, [r7, #28]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d903      	bls.n	800ad0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ad08:	e0e8      	b.n	800aedc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	461c      	mov	r4, r3
 800ad10:	4615      	mov	r5, r2
 800ad12:	f04f 0200 	mov.w	r2, #0
 800ad16:	f04f 0300 	mov.w	r3, #0
 800ad1a:	022b      	lsls	r3, r5, #8
 800ad1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ad20:	0222      	lsls	r2, r4, #8
 800ad22:	68f9      	ldr	r1, [r7, #12]
 800ad24:	6849      	ldr	r1, [r1, #4]
 800ad26:	0849      	lsrs	r1, r1, #1
 800ad28:	2000      	movs	r0, #0
 800ad2a:	4688      	mov	r8, r1
 800ad2c:	4681      	mov	r9, r0
 800ad2e:	eb12 0a08 	adds.w	sl, r2, r8
 800ad32:	eb43 0b09 	adc.w	fp, r3, r9
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	603b      	str	r3, [r7, #0]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad44:	4650      	mov	r0, sl
 800ad46:	4659      	mov	r1, fp
 800ad48:	f7fd faa2 	bl	8008290 <__aeabi_uldivmod>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4613      	mov	r3, r2
 800ad52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad5a:	d308      	bcc.n	800ad6e <UART_SetConfig+0x3de>
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad62:	d204      	bcs.n	800ad6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	69ba      	ldr	r2, [r7, #24]
 800ad6a:	60da      	str	r2, [r3, #12]
 800ad6c:	e0b6      	b.n	800aedc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ad74:	e0b2      	b.n	800aedc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad7e:	d15e      	bne.n	800ae3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ad80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad84:	2b08      	cmp	r3, #8
 800ad86:	d828      	bhi.n	800adda <UART_SetConfig+0x44a>
 800ad88:	a201      	add	r2, pc, #4	; (adr r2, 800ad90 <UART_SetConfig+0x400>)
 800ad8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad8e:	bf00      	nop
 800ad90:	0800adb5 	.word	0x0800adb5
 800ad94:	0800adbd 	.word	0x0800adbd
 800ad98:	0800adc5 	.word	0x0800adc5
 800ad9c:	0800addb 	.word	0x0800addb
 800ada0:	0800adcb 	.word	0x0800adcb
 800ada4:	0800addb 	.word	0x0800addb
 800ada8:	0800addb 	.word	0x0800addb
 800adac:	0800addb 	.word	0x0800addb
 800adb0:	0800add3 	.word	0x0800add3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adb4:	f7fe ffb4 	bl	8009d20 <HAL_RCC_GetPCLK1Freq>
 800adb8:	61f8      	str	r0, [r7, #28]
        break;
 800adba:	e014      	b.n	800ade6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adbc:	f7fe ffc6 	bl	8009d4c <HAL_RCC_GetPCLK2Freq>
 800adc0:	61f8      	str	r0, [r7, #28]
        break;
 800adc2:	e010      	b.n	800ade6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adc4:	4b4d      	ldr	r3, [pc, #308]	; (800aefc <UART_SetConfig+0x56c>)
 800adc6:	61fb      	str	r3, [r7, #28]
        break;
 800adc8:	e00d      	b.n	800ade6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adca:	f7fe ff11 	bl	8009bf0 <HAL_RCC_GetSysClockFreq>
 800adce:	61f8      	str	r0, [r7, #28]
        break;
 800add0:	e009      	b.n	800ade6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800add2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800add6:	61fb      	str	r3, [r7, #28]
        break;
 800add8:	e005      	b.n	800ade6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ade4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d077      	beq.n	800aedc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	005a      	lsls	r2, r3, #1
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	085b      	lsrs	r3, r3, #1
 800adf6:	441a      	add	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	2b0f      	cmp	r3, #15
 800ae06:	d916      	bls.n	800ae36 <UART_SetConfig+0x4a6>
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae0e:	d212      	bcs.n	800ae36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	f023 030f 	bic.w	r3, r3, #15
 800ae18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	085b      	lsrs	r3, r3, #1
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	f003 0307 	and.w	r3, r3, #7
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	8afb      	ldrh	r3, [r7, #22]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	8afa      	ldrh	r2, [r7, #22]
 800ae32:	60da      	str	r2, [r3, #12]
 800ae34:	e052      	b.n	800aedc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ae3c:	e04e      	b.n	800aedc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae42:	2b08      	cmp	r3, #8
 800ae44:	d827      	bhi.n	800ae96 <UART_SetConfig+0x506>
 800ae46:	a201      	add	r2, pc, #4	; (adr r2, 800ae4c <UART_SetConfig+0x4bc>)
 800ae48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4c:	0800ae71 	.word	0x0800ae71
 800ae50:	0800ae79 	.word	0x0800ae79
 800ae54:	0800ae81 	.word	0x0800ae81
 800ae58:	0800ae97 	.word	0x0800ae97
 800ae5c:	0800ae87 	.word	0x0800ae87
 800ae60:	0800ae97 	.word	0x0800ae97
 800ae64:	0800ae97 	.word	0x0800ae97
 800ae68:	0800ae97 	.word	0x0800ae97
 800ae6c:	0800ae8f 	.word	0x0800ae8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae70:	f7fe ff56 	bl	8009d20 <HAL_RCC_GetPCLK1Freq>
 800ae74:	61f8      	str	r0, [r7, #28]
        break;
 800ae76:	e014      	b.n	800aea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae78:	f7fe ff68 	bl	8009d4c <HAL_RCC_GetPCLK2Freq>
 800ae7c:	61f8      	str	r0, [r7, #28]
        break;
 800ae7e:	e010      	b.n	800aea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae80:	4b1e      	ldr	r3, [pc, #120]	; (800aefc <UART_SetConfig+0x56c>)
 800ae82:	61fb      	str	r3, [r7, #28]
        break;
 800ae84:	e00d      	b.n	800aea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae86:	f7fe feb3 	bl	8009bf0 <HAL_RCC_GetSysClockFreq>
 800ae8a:	61f8      	str	r0, [r7, #28]
        break;
 800ae8c:	e009      	b.n	800aea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae92:	61fb      	str	r3, [r7, #28]
        break;
 800ae94:	e005      	b.n	800aea2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ae96:	2300      	movs	r3, #0
 800ae98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800aea0:	bf00      	nop
    }

    if (pclk != 0U)
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d019      	beq.n	800aedc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	085a      	lsrs	r2, r3, #1
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	441a      	add	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	2b0f      	cmp	r3, #15
 800aec0:	d909      	bls.n	800aed6 <UART_SetConfig+0x546>
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aec8:	d205      	bcs.n	800aed6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	b29a      	uxth	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	60da      	str	r2, [r3, #12]
 800aed4:	e002      	b.n	800aedc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2200      	movs	r2, #0
 800aee6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800aee8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3728      	adds	r7, #40	; 0x28
 800aef0:	46bd      	mov	sp, r7
 800aef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aef6:	bf00      	nop
 800aef8:	40008000 	.word	0x40008000
 800aefc:	00f42400 	.word	0x00f42400

0800af00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	f003 0301 	and.w	r3, r3, #1
 800af10:	2b00      	cmp	r3, #0
 800af12:	d00a      	beq.n	800af2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	430a      	orrs	r2, r1
 800af28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2e:	f003 0302 	and.w	r3, r3, #2
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00a      	beq.n	800af4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	430a      	orrs	r2, r1
 800af4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af50:	f003 0304 	and.w	r3, r3, #4
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00a      	beq.n	800af6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af72:	f003 0308 	and.w	r3, r3, #8
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00a      	beq.n	800af90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	430a      	orrs	r2, r1
 800af8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af94:	f003 0310 	and.w	r3, r3, #16
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00a      	beq.n	800afb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	430a      	orrs	r2, r1
 800afb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb6:	f003 0320 	and.w	r3, r3, #32
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00a      	beq.n	800afd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d01a      	beq.n	800b016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	430a      	orrs	r2, r1
 800aff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800affe:	d10a      	bne.n	800b016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00a      	beq.n	800b038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	430a      	orrs	r2, r1
 800b036:	605a      	str	r2, [r3, #4]
  }
}
 800b038:	bf00      	nop
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af02      	add	r7, sp, #8
 800b04a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b054:	f7fd fd8e 	bl	8008b74 <HAL_GetTick>
 800b058:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0308 	and.w	r3, r3, #8
 800b064:	2b08      	cmp	r3, #8
 800b066:	d10e      	bne.n	800b086 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2200      	movs	r2, #0
 800b072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f82d 	bl	800b0d6 <UART_WaitOnFlagUntilTimeout>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d001      	beq.n	800b086 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	e023      	b.n	800b0ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0304 	and.w	r3, r3, #4
 800b090:	2b04      	cmp	r3, #4
 800b092:	d10e      	bne.n	800b0b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f817 	bl	800b0d6 <UART_WaitOnFlagUntilTimeout>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	e00d      	b.n	800b0ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2220      	movs	r2, #32
 800b0b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2220      	movs	r2, #32
 800b0bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b09c      	sub	sp, #112	; 0x70
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	60f8      	str	r0, [r7, #12]
 800b0de:	60b9      	str	r1, [r7, #8]
 800b0e0:	603b      	str	r3, [r7, #0]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0e6:	e0a5      	b.n	800b234 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ee:	f000 80a1 	beq.w	800b234 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0f2:	f7fd fd3f 	bl	8008b74 <HAL_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d302      	bcc.n	800b108 <UART_WaitOnFlagUntilTimeout+0x32>
 800b102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b104:	2b00      	cmp	r3, #0
 800b106:	d13e      	bne.n	800b186 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b110:	e853 3f00 	ldrex	r3, [r3]
 800b114:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b118:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b11c:	667b      	str	r3, [r7, #100]	; 0x64
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	461a      	mov	r2, r3
 800b124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b126:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b128:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b12c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1e6      	bne.n	800b108 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	3308      	adds	r3, #8
 800b140:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b144:	e853 3f00 	ldrex	r3, [r3]
 800b148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14c:	f023 0301 	bic.w	r3, r3, #1
 800b150:	663b      	str	r3, [r7, #96]	; 0x60
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3308      	adds	r3, #8
 800b158:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b15a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b15c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b162:	e841 2300 	strex	r3, r2, [r1]
 800b166:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1e5      	bne.n	800b13a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2220      	movs	r2, #32
 800b172:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2220      	movs	r2, #32
 800b178:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b182:	2303      	movs	r3, #3
 800b184:	e067      	b.n	800b256 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f003 0304 	and.w	r3, r3, #4
 800b190:	2b00      	cmp	r3, #0
 800b192:	d04f      	beq.n	800b234 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	69db      	ldr	r3, [r3, #28]
 800b19a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b19e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1a2:	d147      	bne.n	800b234 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	e853 3f00 	ldrex	r3, [r3]
 800b1ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b1c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1d4:	e841 2300 	strex	r3, r2, [r1]
 800b1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1e6      	bne.n	800b1ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	e853 3f00 	ldrex	r3, [r3]
 800b1ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f023 0301 	bic.w	r3, r3, #1
 800b1f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	3308      	adds	r3, #8
 800b1fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b200:	623a      	str	r2, [r7, #32]
 800b202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b204:	69f9      	ldr	r1, [r7, #28]
 800b206:	6a3a      	ldr	r2, [r7, #32]
 800b208:	e841 2300 	strex	r3, r2, [r1]
 800b20c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1e5      	bne.n	800b1e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2220      	movs	r2, #32
 800b218:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2220      	movs	r2, #32
 800b21e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2220      	movs	r2, #32
 800b224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b230:	2303      	movs	r3, #3
 800b232:	e010      	b.n	800b256 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	69da      	ldr	r2, [r3, #28]
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	4013      	ands	r3, r2
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	429a      	cmp	r2, r3
 800b242:	bf0c      	ite	eq
 800b244:	2301      	moveq	r3, #1
 800b246:	2300      	movne	r3, #0
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	461a      	mov	r2, r3
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	429a      	cmp	r2, r3
 800b250:	f43f af4a 	beq.w	800b0e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3770      	adds	r7, #112	; 0x70
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
	...

0800b260 <__errno>:
 800b260:	4b01      	ldr	r3, [pc, #4]	; (800b268 <__errno+0x8>)
 800b262:	6818      	ldr	r0, [r3, #0]
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	2000000c 	.word	0x2000000c

0800b26c <__libc_init_array>:
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	4d0d      	ldr	r5, [pc, #52]	; (800b2a4 <__libc_init_array+0x38>)
 800b270:	4c0d      	ldr	r4, [pc, #52]	; (800b2a8 <__libc_init_array+0x3c>)
 800b272:	1b64      	subs	r4, r4, r5
 800b274:	10a4      	asrs	r4, r4, #2
 800b276:	2600      	movs	r6, #0
 800b278:	42a6      	cmp	r6, r4
 800b27a:	d109      	bne.n	800b290 <__libc_init_array+0x24>
 800b27c:	4d0b      	ldr	r5, [pc, #44]	; (800b2ac <__libc_init_array+0x40>)
 800b27e:	4c0c      	ldr	r4, [pc, #48]	; (800b2b0 <__libc_init_array+0x44>)
 800b280:	f000 ffae 	bl	800c1e0 <_init>
 800b284:	1b64      	subs	r4, r4, r5
 800b286:	10a4      	asrs	r4, r4, #2
 800b288:	2600      	movs	r6, #0
 800b28a:	42a6      	cmp	r6, r4
 800b28c:	d105      	bne.n	800b29a <__libc_init_array+0x2e>
 800b28e:	bd70      	pop	{r4, r5, r6, pc}
 800b290:	f855 3b04 	ldr.w	r3, [r5], #4
 800b294:	4798      	blx	r3
 800b296:	3601      	adds	r6, #1
 800b298:	e7ee      	b.n	800b278 <__libc_init_array+0xc>
 800b29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b29e:	4798      	blx	r3
 800b2a0:	3601      	adds	r6, #1
 800b2a2:	e7f2      	b.n	800b28a <__libc_init_array+0x1e>
 800b2a4:	0800c31c 	.word	0x0800c31c
 800b2a8:	0800c31c 	.word	0x0800c31c
 800b2ac:	0800c31c 	.word	0x0800c31c
 800b2b0:	0800c320 	.word	0x0800c320

0800b2b4 <memset>:
 800b2b4:	4402      	add	r2, r0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d100      	bne.n	800b2be <memset+0xa>
 800b2bc:	4770      	bx	lr
 800b2be:	f803 1b01 	strb.w	r1, [r3], #1
 800b2c2:	e7f9      	b.n	800b2b8 <memset+0x4>

0800b2c4 <iprintf>:
 800b2c4:	b40f      	push	{r0, r1, r2, r3}
 800b2c6:	4b0a      	ldr	r3, [pc, #40]	; (800b2f0 <iprintf+0x2c>)
 800b2c8:	b513      	push	{r0, r1, r4, lr}
 800b2ca:	681c      	ldr	r4, [r3, #0]
 800b2cc:	b124      	cbz	r4, 800b2d8 <iprintf+0x14>
 800b2ce:	69a3      	ldr	r3, [r4, #24]
 800b2d0:	b913      	cbnz	r3, 800b2d8 <iprintf+0x14>
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 f866 	bl	800b3a4 <__sinit>
 800b2d8:	ab05      	add	r3, sp, #20
 800b2da:	9a04      	ldr	r2, [sp, #16]
 800b2dc:	68a1      	ldr	r1, [r4, #8]
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f000 f9bd 	bl	800b660 <_vfiprintf_r>
 800b2e6:	b002      	add	sp, #8
 800b2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2ec:	b004      	add	sp, #16
 800b2ee:	4770      	bx	lr
 800b2f0:	2000000c 	.word	0x2000000c

0800b2f4 <std>:
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	b510      	push	{r4, lr}
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b2fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b302:	6083      	str	r3, [r0, #8]
 800b304:	8181      	strh	r1, [r0, #12]
 800b306:	6643      	str	r3, [r0, #100]	; 0x64
 800b308:	81c2      	strh	r2, [r0, #14]
 800b30a:	6183      	str	r3, [r0, #24]
 800b30c:	4619      	mov	r1, r3
 800b30e:	2208      	movs	r2, #8
 800b310:	305c      	adds	r0, #92	; 0x5c
 800b312:	f7ff ffcf 	bl	800b2b4 <memset>
 800b316:	4b05      	ldr	r3, [pc, #20]	; (800b32c <std+0x38>)
 800b318:	6263      	str	r3, [r4, #36]	; 0x24
 800b31a:	4b05      	ldr	r3, [pc, #20]	; (800b330 <std+0x3c>)
 800b31c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b31e:	4b05      	ldr	r3, [pc, #20]	; (800b334 <std+0x40>)
 800b320:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b322:	4b05      	ldr	r3, [pc, #20]	; (800b338 <std+0x44>)
 800b324:	6224      	str	r4, [r4, #32]
 800b326:	6323      	str	r3, [r4, #48]	; 0x30
 800b328:	bd10      	pop	{r4, pc}
 800b32a:	bf00      	nop
 800b32c:	0800bc09 	.word	0x0800bc09
 800b330:	0800bc2b 	.word	0x0800bc2b
 800b334:	0800bc63 	.word	0x0800bc63
 800b338:	0800bc87 	.word	0x0800bc87

0800b33c <_cleanup_r>:
 800b33c:	4901      	ldr	r1, [pc, #4]	; (800b344 <_cleanup_r+0x8>)
 800b33e:	f000 b8af 	b.w	800b4a0 <_fwalk_reent>
 800b342:	bf00      	nop
 800b344:	0800bf61 	.word	0x0800bf61

0800b348 <__sfmoreglue>:
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	2268      	movs	r2, #104	; 0x68
 800b34c:	1e4d      	subs	r5, r1, #1
 800b34e:	4355      	muls	r5, r2
 800b350:	460e      	mov	r6, r1
 800b352:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b356:	f000 f8e5 	bl	800b524 <_malloc_r>
 800b35a:	4604      	mov	r4, r0
 800b35c:	b140      	cbz	r0, 800b370 <__sfmoreglue+0x28>
 800b35e:	2100      	movs	r1, #0
 800b360:	e9c0 1600 	strd	r1, r6, [r0]
 800b364:	300c      	adds	r0, #12
 800b366:	60a0      	str	r0, [r4, #8]
 800b368:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b36c:	f7ff ffa2 	bl	800b2b4 <memset>
 800b370:	4620      	mov	r0, r4
 800b372:	bd70      	pop	{r4, r5, r6, pc}

0800b374 <__sfp_lock_acquire>:
 800b374:	4801      	ldr	r0, [pc, #4]	; (800b37c <__sfp_lock_acquire+0x8>)
 800b376:	f000 b8b3 	b.w	800b4e0 <__retarget_lock_acquire_recursive>
 800b37a:	bf00      	nop
 800b37c:	20000119 	.word	0x20000119

0800b380 <__sfp_lock_release>:
 800b380:	4801      	ldr	r0, [pc, #4]	; (800b388 <__sfp_lock_release+0x8>)
 800b382:	f000 b8ae 	b.w	800b4e2 <__retarget_lock_release_recursive>
 800b386:	bf00      	nop
 800b388:	20000119 	.word	0x20000119

0800b38c <__sinit_lock_acquire>:
 800b38c:	4801      	ldr	r0, [pc, #4]	; (800b394 <__sinit_lock_acquire+0x8>)
 800b38e:	f000 b8a7 	b.w	800b4e0 <__retarget_lock_acquire_recursive>
 800b392:	bf00      	nop
 800b394:	2000011a 	.word	0x2000011a

0800b398 <__sinit_lock_release>:
 800b398:	4801      	ldr	r0, [pc, #4]	; (800b3a0 <__sinit_lock_release+0x8>)
 800b39a:	f000 b8a2 	b.w	800b4e2 <__retarget_lock_release_recursive>
 800b39e:	bf00      	nop
 800b3a0:	2000011a 	.word	0x2000011a

0800b3a4 <__sinit>:
 800b3a4:	b510      	push	{r4, lr}
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	f7ff fff0 	bl	800b38c <__sinit_lock_acquire>
 800b3ac:	69a3      	ldr	r3, [r4, #24]
 800b3ae:	b11b      	cbz	r3, 800b3b8 <__sinit+0x14>
 800b3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b4:	f7ff bff0 	b.w	800b398 <__sinit_lock_release>
 800b3b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3bc:	6523      	str	r3, [r4, #80]	; 0x50
 800b3be:	4b13      	ldr	r3, [pc, #76]	; (800b40c <__sinit+0x68>)
 800b3c0:	4a13      	ldr	r2, [pc, #76]	; (800b410 <__sinit+0x6c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3c6:	42a3      	cmp	r3, r4
 800b3c8:	bf04      	itt	eq
 800b3ca:	2301      	moveq	r3, #1
 800b3cc:	61a3      	streq	r3, [r4, #24]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f000 f820 	bl	800b414 <__sfp>
 800b3d4:	6060      	str	r0, [r4, #4]
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 f81c 	bl	800b414 <__sfp>
 800b3dc:	60a0      	str	r0, [r4, #8]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f000 f818 	bl	800b414 <__sfp>
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	60e0      	str	r0, [r4, #12]
 800b3e8:	2104      	movs	r1, #4
 800b3ea:	6860      	ldr	r0, [r4, #4]
 800b3ec:	f7ff ff82 	bl	800b2f4 <std>
 800b3f0:	68a0      	ldr	r0, [r4, #8]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	2109      	movs	r1, #9
 800b3f6:	f7ff ff7d 	bl	800b2f4 <std>
 800b3fa:	68e0      	ldr	r0, [r4, #12]
 800b3fc:	2202      	movs	r2, #2
 800b3fe:	2112      	movs	r1, #18
 800b400:	f7ff ff78 	bl	800b2f4 <std>
 800b404:	2301      	movs	r3, #1
 800b406:	61a3      	str	r3, [r4, #24]
 800b408:	e7d2      	b.n	800b3b0 <__sinit+0xc>
 800b40a:	bf00      	nop
 800b40c:	0800c27c 	.word	0x0800c27c
 800b410:	0800b33d 	.word	0x0800b33d

0800b414 <__sfp>:
 800b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b416:	4607      	mov	r7, r0
 800b418:	f7ff ffac 	bl	800b374 <__sfp_lock_acquire>
 800b41c:	4b1e      	ldr	r3, [pc, #120]	; (800b498 <__sfp+0x84>)
 800b41e:	681e      	ldr	r6, [r3, #0]
 800b420:	69b3      	ldr	r3, [r6, #24]
 800b422:	b913      	cbnz	r3, 800b42a <__sfp+0x16>
 800b424:	4630      	mov	r0, r6
 800b426:	f7ff ffbd 	bl	800b3a4 <__sinit>
 800b42a:	3648      	adds	r6, #72	; 0x48
 800b42c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b430:	3b01      	subs	r3, #1
 800b432:	d503      	bpl.n	800b43c <__sfp+0x28>
 800b434:	6833      	ldr	r3, [r6, #0]
 800b436:	b30b      	cbz	r3, 800b47c <__sfp+0x68>
 800b438:	6836      	ldr	r6, [r6, #0]
 800b43a:	e7f7      	b.n	800b42c <__sfp+0x18>
 800b43c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b440:	b9d5      	cbnz	r5, 800b478 <__sfp+0x64>
 800b442:	4b16      	ldr	r3, [pc, #88]	; (800b49c <__sfp+0x88>)
 800b444:	60e3      	str	r3, [r4, #12]
 800b446:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b44a:	6665      	str	r5, [r4, #100]	; 0x64
 800b44c:	f000 f847 	bl	800b4de <__retarget_lock_init_recursive>
 800b450:	f7ff ff96 	bl	800b380 <__sfp_lock_release>
 800b454:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b458:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b45c:	6025      	str	r5, [r4, #0]
 800b45e:	61a5      	str	r5, [r4, #24]
 800b460:	2208      	movs	r2, #8
 800b462:	4629      	mov	r1, r5
 800b464:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b468:	f7ff ff24 	bl	800b2b4 <memset>
 800b46c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b470:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b474:	4620      	mov	r0, r4
 800b476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b478:	3468      	adds	r4, #104	; 0x68
 800b47a:	e7d9      	b.n	800b430 <__sfp+0x1c>
 800b47c:	2104      	movs	r1, #4
 800b47e:	4638      	mov	r0, r7
 800b480:	f7ff ff62 	bl	800b348 <__sfmoreglue>
 800b484:	4604      	mov	r4, r0
 800b486:	6030      	str	r0, [r6, #0]
 800b488:	2800      	cmp	r0, #0
 800b48a:	d1d5      	bne.n	800b438 <__sfp+0x24>
 800b48c:	f7ff ff78 	bl	800b380 <__sfp_lock_release>
 800b490:	230c      	movs	r3, #12
 800b492:	603b      	str	r3, [r7, #0]
 800b494:	e7ee      	b.n	800b474 <__sfp+0x60>
 800b496:	bf00      	nop
 800b498:	0800c27c 	.word	0x0800c27c
 800b49c:	ffff0001 	.word	0xffff0001

0800b4a0 <_fwalk_reent>:
 800b4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	4688      	mov	r8, r1
 800b4a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4ac:	2700      	movs	r7, #0
 800b4ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4b2:	f1b9 0901 	subs.w	r9, r9, #1
 800b4b6:	d505      	bpl.n	800b4c4 <_fwalk_reent+0x24>
 800b4b8:	6824      	ldr	r4, [r4, #0]
 800b4ba:	2c00      	cmp	r4, #0
 800b4bc:	d1f7      	bne.n	800b4ae <_fwalk_reent+0xe>
 800b4be:	4638      	mov	r0, r7
 800b4c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4c4:	89ab      	ldrh	r3, [r5, #12]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d907      	bls.n	800b4da <_fwalk_reent+0x3a>
 800b4ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	d003      	beq.n	800b4da <_fwalk_reent+0x3a>
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	47c0      	blx	r8
 800b4d8:	4307      	orrs	r7, r0
 800b4da:	3568      	adds	r5, #104	; 0x68
 800b4dc:	e7e9      	b.n	800b4b2 <_fwalk_reent+0x12>

0800b4de <__retarget_lock_init_recursive>:
 800b4de:	4770      	bx	lr

0800b4e0 <__retarget_lock_acquire_recursive>:
 800b4e0:	4770      	bx	lr

0800b4e2 <__retarget_lock_release_recursive>:
 800b4e2:	4770      	bx	lr

0800b4e4 <sbrk_aligned>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	4e0e      	ldr	r6, [pc, #56]	; (800b520 <sbrk_aligned+0x3c>)
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	6831      	ldr	r1, [r6, #0]
 800b4ec:	4605      	mov	r5, r0
 800b4ee:	b911      	cbnz	r1, 800b4f6 <sbrk_aligned+0x12>
 800b4f0:	f000 fb7a 	bl	800bbe8 <_sbrk_r>
 800b4f4:	6030      	str	r0, [r6, #0]
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	f000 fb75 	bl	800bbe8 <_sbrk_r>
 800b4fe:	1c43      	adds	r3, r0, #1
 800b500:	d00a      	beq.n	800b518 <sbrk_aligned+0x34>
 800b502:	1cc4      	adds	r4, r0, #3
 800b504:	f024 0403 	bic.w	r4, r4, #3
 800b508:	42a0      	cmp	r0, r4
 800b50a:	d007      	beq.n	800b51c <sbrk_aligned+0x38>
 800b50c:	1a21      	subs	r1, r4, r0
 800b50e:	4628      	mov	r0, r5
 800b510:	f000 fb6a 	bl	800bbe8 <_sbrk_r>
 800b514:	3001      	adds	r0, #1
 800b516:	d101      	bne.n	800b51c <sbrk_aligned+0x38>
 800b518:	f04f 34ff 	mov.w	r4, #4294967295
 800b51c:	4620      	mov	r0, r4
 800b51e:	bd70      	pop	{r4, r5, r6, pc}
 800b520:	20000120 	.word	0x20000120

0800b524 <_malloc_r>:
 800b524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b528:	1ccd      	adds	r5, r1, #3
 800b52a:	f025 0503 	bic.w	r5, r5, #3
 800b52e:	3508      	adds	r5, #8
 800b530:	2d0c      	cmp	r5, #12
 800b532:	bf38      	it	cc
 800b534:	250c      	movcc	r5, #12
 800b536:	2d00      	cmp	r5, #0
 800b538:	4607      	mov	r7, r0
 800b53a:	db01      	blt.n	800b540 <_malloc_r+0x1c>
 800b53c:	42a9      	cmp	r1, r5
 800b53e:	d905      	bls.n	800b54c <_malloc_r+0x28>
 800b540:	230c      	movs	r3, #12
 800b542:	603b      	str	r3, [r7, #0]
 800b544:	2600      	movs	r6, #0
 800b546:	4630      	mov	r0, r6
 800b548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b54c:	4e2e      	ldr	r6, [pc, #184]	; (800b608 <_malloc_r+0xe4>)
 800b54e:	f000 fdbb 	bl	800c0c8 <__malloc_lock>
 800b552:	6833      	ldr	r3, [r6, #0]
 800b554:	461c      	mov	r4, r3
 800b556:	bb34      	cbnz	r4, 800b5a6 <_malloc_r+0x82>
 800b558:	4629      	mov	r1, r5
 800b55a:	4638      	mov	r0, r7
 800b55c:	f7ff ffc2 	bl	800b4e4 <sbrk_aligned>
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	4604      	mov	r4, r0
 800b564:	d14d      	bne.n	800b602 <_malloc_r+0xde>
 800b566:	6834      	ldr	r4, [r6, #0]
 800b568:	4626      	mov	r6, r4
 800b56a:	2e00      	cmp	r6, #0
 800b56c:	d140      	bne.n	800b5f0 <_malloc_r+0xcc>
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	4631      	mov	r1, r6
 800b572:	4638      	mov	r0, r7
 800b574:	eb04 0803 	add.w	r8, r4, r3
 800b578:	f000 fb36 	bl	800bbe8 <_sbrk_r>
 800b57c:	4580      	cmp	r8, r0
 800b57e:	d13a      	bne.n	800b5f6 <_malloc_r+0xd2>
 800b580:	6821      	ldr	r1, [r4, #0]
 800b582:	3503      	adds	r5, #3
 800b584:	1a6d      	subs	r5, r5, r1
 800b586:	f025 0503 	bic.w	r5, r5, #3
 800b58a:	3508      	adds	r5, #8
 800b58c:	2d0c      	cmp	r5, #12
 800b58e:	bf38      	it	cc
 800b590:	250c      	movcc	r5, #12
 800b592:	4629      	mov	r1, r5
 800b594:	4638      	mov	r0, r7
 800b596:	f7ff ffa5 	bl	800b4e4 <sbrk_aligned>
 800b59a:	3001      	adds	r0, #1
 800b59c:	d02b      	beq.n	800b5f6 <_malloc_r+0xd2>
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	442b      	add	r3, r5
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	e00e      	b.n	800b5c4 <_malloc_r+0xa0>
 800b5a6:	6822      	ldr	r2, [r4, #0]
 800b5a8:	1b52      	subs	r2, r2, r5
 800b5aa:	d41e      	bmi.n	800b5ea <_malloc_r+0xc6>
 800b5ac:	2a0b      	cmp	r2, #11
 800b5ae:	d916      	bls.n	800b5de <_malloc_r+0xba>
 800b5b0:	1961      	adds	r1, r4, r5
 800b5b2:	42a3      	cmp	r3, r4
 800b5b4:	6025      	str	r5, [r4, #0]
 800b5b6:	bf18      	it	ne
 800b5b8:	6059      	strne	r1, [r3, #4]
 800b5ba:	6863      	ldr	r3, [r4, #4]
 800b5bc:	bf08      	it	eq
 800b5be:	6031      	streq	r1, [r6, #0]
 800b5c0:	5162      	str	r2, [r4, r5]
 800b5c2:	604b      	str	r3, [r1, #4]
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	f104 060b 	add.w	r6, r4, #11
 800b5ca:	f000 fd83 	bl	800c0d4 <__malloc_unlock>
 800b5ce:	f026 0607 	bic.w	r6, r6, #7
 800b5d2:	1d23      	adds	r3, r4, #4
 800b5d4:	1af2      	subs	r2, r6, r3
 800b5d6:	d0b6      	beq.n	800b546 <_malloc_r+0x22>
 800b5d8:	1b9b      	subs	r3, r3, r6
 800b5da:	50a3      	str	r3, [r4, r2]
 800b5dc:	e7b3      	b.n	800b546 <_malloc_r+0x22>
 800b5de:	6862      	ldr	r2, [r4, #4]
 800b5e0:	42a3      	cmp	r3, r4
 800b5e2:	bf0c      	ite	eq
 800b5e4:	6032      	streq	r2, [r6, #0]
 800b5e6:	605a      	strne	r2, [r3, #4]
 800b5e8:	e7ec      	b.n	800b5c4 <_malloc_r+0xa0>
 800b5ea:	4623      	mov	r3, r4
 800b5ec:	6864      	ldr	r4, [r4, #4]
 800b5ee:	e7b2      	b.n	800b556 <_malloc_r+0x32>
 800b5f0:	4634      	mov	r4, r6
 800b5f2:	6876      	ldr	r6, [r6, #4]
 800b5f4:	e7b9      	b.n	800b56a <_malloc_r+0x46>
 800b5f6:	230c      	movs	r3, #12
 800b5f8:	603b      	str	r3, [r7, #0]
 800b5fa:	4638      	mov	r0, r7
 800b5fc:	f000 fd6a 	bl	800c0d4 <__malloc_unlock>
 800b600:	e7a1      	b.n	800b546 <_malloc_r+0x22>
 800b602:	6025      	str	r5, [r4, #0]
 800b604:	e7de      	b.n	800b5c4 <_malloc_r+0xa0>
 800b606:	bf00      	nop
 800b608:	2000011c 	.word	0x2000011c

0800b60c <__sfputc_r>:
 800b60c:	6893      	ldr	r3, [r2, #8]
 800b60e:	3b01      	subs	r3, #1
 800b610:	2b00      	cmp	r3, #0
 800b612:	b410      	push	{r4}
 800b614:	6093      	str	r3, [r2, #8]
 800b616:	da08      	bge.n	800b62a <__sfputc_r+0x1e>
 800b618:	6994      	ldr	r4, [r2, #24]
 800b61a:	42a3      	cmp	r3, r4
 800b61c:	db01      	blt.n	800b622 <__sfputc_r+0x16>
 800b61e:	290a      	cmp	r1, #10
 800b620:	d103      	bne.n	800b62a <__sfputc_r+0x1e>
 800b622:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b626:	f000 bb33 	b.w	800bc90 <__swbuf_r>
 800b62a:	6813      	ldr	r3, [r2, #0]
 800b62c:	1c58      	adds	r0, r3, #1
 800b62e:	6010      	str	r0, [r2, #0]
 800b630:	7019      	strb	r1, [r3, #0]
 800b632:	4608      	mov	r0, r1
 800b634:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <__sfputs_r>:
 800b63a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63c:	4606      	mov	r6, r0
 800b63e:	460f      	mov	r7, r1
 800b640:	4614      	mov	r4, r2
 800b642:	18d5      	adds	r5, r2, r3
 800b644:	42ac      	cmp	r4, r5
 800b646:	d101      	bne.n	800b64c <__sfputs_r+0x12>
 800b648:	2000      	movs	r0, #0
 800b64a:	e007      	b.n	800b65c <__sfputs_r+0x22>
 800b64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b650:	463a      	mov	r2, r7
 800b652:	4630      	mov	r0, r6
 800b654:	f7ff ffda 	bl	800b60c <__sfputc_r>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	d1f3      	bne.n	800b644 <__sfputs_r+0xa>
 800b65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b660 <_vfiprintf_r>:
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	460d      	mov	r5, r1
 800b666:	b09d      	sub	sp, #116	; 0x74
 800b668:	4614      	mov	r4, r2
 800b66a:	4698      	mov	r8, r3
 800b66c:	4606      	mov	r6, r0
 800b66e:	b118      	cbz	r0, 800b678 <_vfiprintf_r+0x18>
 800b670:	6983      	ldr	r3, [r0, #24]
 800b672:	b90b      	cbnz	r3, 800b678 <_vfiprintf_r+0x18>
 800b674:	f7ff fe96 	bl	800b3a4 <__sinit>
 800b678:	4b89      	ldr	r3, [pc, #548]	; (800b8a0 <_vfiprintf_r+0x240>)
 800b67a:	429d      	cmp	r5, r3
 800b67c:	d11b      	bne.n	800b6b6 <_vfiprintf_r+0x56>
 800b67e:	6875      	ldr	r5, [r6, #4]
 800b680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b682:	07d9      	lsls	r1, r3, #31
 800b684:	d405      	bmi.n	800b692 <_vfiprintf_r+0x32>
 800b686:	89ab      	ldrh	r3, [r5, #12]
 800b688:	059a      	lsls	r2, r3, #22
 800b68a:	d402      	bmi.n	800b692 <_vfiprintf_r+0x32>
 800b68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b68e:	f7ff ff27 	bl	800b4e0 <__retarget_lock_acquire_recursive>
 800b692:	89ab      	ldrh	r3, [r5, #12]
 800b694:	071b      	lsls	r3, r3, #28
 800b696:	d501      	bpl.n	800b69c <_vfiprintf_r+0x3c>
 800b698:	692b      	ldr	r3, [r5, #16]
 800b69a:	b9eb      	cbnz	r3, 800b6d8 <_vfiprintf_r+0x78>
 800b69c:	4629      	mov	r1, r5
 800b69e:	4630      	mov	r0, r6
 800b6a0:	f000 fb5a 	bl	800bd58 <__swsetup_r>
 800b6a4:	b1c0      	cbz	r0, 800b6d8 <_vfiprintf_r+0x78>
 800b6a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6a8:	07dc      	lsls	r4, r3, #31
 800b6aa:	d50e      	bpl.n	800b6ca <_vfiprintf_r+0x6a>
 800b6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b0:	b01d      	add	sp, #116	; 0x74
 800b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b6:	4b7b      	ldr	r3, [pc, #492]	; (800b8a4 <_vfiprintf_r+0x244>)
 800b6b8:	429d      	cmp	r5, r3
 800b6ba:	d101      	bne.n	800b6c0 <_vfiprintf_r+0x60>
 800b6bc:	68b5      	ldr	r5, [r6, #8]
 800b6be:	e7df      	b.n	800b680 <_vfiprintf_r+0x20>
 800b6c0:	4b79      	ldr	r3, [pc, #484]	; (800b8a8 <_vfiprintf_r+0x248>)
 800b6c2:	429d      	cmp	r5, r3
 800b6c4:	bf08      	it	eq
 800b6c6:	68f5      	ldreq	r5, [r6, #12]
 800b6c8:	e7da      	b.n	800b680 <_vfiprintf_r+0x20>
 800b6ca:	89ab      	ldrh	r3, [r5, #12]
 800b6cc:	0598      	lsls	r0, r3, #22
 800b6ce:	d4ed      	bmi.n	800b6ac <_vfiprintf_r+0x4c>
 800b6d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6d2:	f7ff ff06 	bl	800b4e2 <__retarget_lock_release_recursive>
 800b6d6:	e7e9      	b.n	800b6ac <_vfiprintf_r+0x4c>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	9309      	str	r3, [sp, #36]	; 0x24
 800b6dc:	2320      	movs	r3, #32
 800b6de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6e6:	2330      	movs	r3, #48	; 0x30
 800b6e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8ac <_vfiprintf_r+0x24c>
 800b6ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6f0:	f04f 0901 	mov.w	r9, #1
 800b6f4:	4623      	mov	r3, r4
 800b6f6:	469a      	mov	sl, r3
 800b6f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6fc:	b10a      	cbz	r2, 800b702 <_vfiprintf_r+0xa2>
 800b6fe:	2a25      	cmp	r2, #37	; 0x25
 800b700:	d1f9      	bne.n	800b6f6 <_vfiprintf_r+0x96>
 800b702:	ebba 0b04 	subs.w	fp, sl, r4
 800b706:	d00b      	beq.n	800b720 <_vfiprintf_r+0xc0>
 800b708:	465b      	mov	r3, fp
 800b70a:	4622      	mov	r2, r4
 800b70c:	4629      	mov	r1, r5
 800b70e:	4630      	mov	r0, r6
 800b710:	f7ff ff93 	bl	800b63a <__sfputs_r>
 800b714:	3001      	adds	r0, #1
 800b716:	f000 80aa 	beq.w	800b86e <_vfiprintf_r+0x20e>
 800b71a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b71c:	445a      	add	r2, fp
 800b71e:	9209      	str	r2, [sp, #36]	; 0x24
 800b720:	f89a 3000 	ldrb.w	r3, [sl]
 800b724:	2b00      	cmp	r3, #0
 800b726:	f000 80a2 	beq.w	800b86e <_vfiprintf_r+0x20e>
 800b72a:	2300      	movs	r3, #0
 800b72c:	f04f 32ff 	mov.w	r2, #4294967295
 800b730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b734:	f10a 0a01 	add.w	sl, sl, #1
 800b738:	9304      	str	r3, [sp, #16]
 800b73a:	9307      	str	r3, [sp, #28]
 800b73c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b740:	931a      	str	r3, [sp, #104]	; 0x68
 800b742:	4654      	mov	r4, sl
 800b744:	2205      	movs	r2, #5
 800b746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b74a:	4858      	ldr	r0, [pc, #352]	; (800b8ac <_vfiprintf_r+0x24c>)
 800b74c:	f7fc fd50 	bl	80081f0 <memchr>
 800b750:	9a04      	ldr	r2, [sp, #16]
 800b752:	b9d8      	cbnz	r0, 800b78c <_vfiprintf_r+0x12c>
 800b754:	06d1      	lsls	r1, r2, #27
 800b756:	bf44      	itt	mi
 800b758:	2320      	movmi	r3, #32
 800b75a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b75e:	0713      	lsls	r3, r2, #28
 800b760:	bf44      	itt	mi
 800b762:	232b      	movmi	r3, #43	; 0x2b
 800b764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b768:	f89a 3000 	ldrb.w	r3, [sl]
 800b76c:	2b2a      	cmp	r3, #42	; 0x2a
 800b76e:	d015      	beq.n	800b79c <_vfiprintf_r+0x13c>
 800b770:	9a07      	ldr	r2, [sp, #28]
 800b772:	4654      	mov	r4, sl
 800b774:	2000      	movs	r0, #0
 800b776:	f04f 0c0a 	mov.w	ip, #10
 800b77a:	4621      	mov	r1, r4
 800b77c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b780:	3b30      	subs	r3, #48	; 0x30
 800b782:	2b09      	cmp	r3, #9
 800b784:	d94e      	bls.n	800b824 <_vfiprintf_r+0x1c4>
 800b786:	b1b0      	cbz	r0, 800b7b6 <_vfiprintf_r+0x156>
 800b788:	9207      	str	r2, [sp, #28]
 800b78a:	e014      	b.n	800b7b6 <_vfiprintf_r+0x156>
 800b78c:	eba0 0308 	sub.w	r3, r0, r8
 800b790:	fa09 f303 	lsl.w	r3, r9, r3
 800b794:	4313      	orrs	r3, r2
 800b796:	9304      	str	r3, [sp, #16]
 800b798:	46a2      	mov	sl, r4
 800b79a:	e7d2      	b.n	800b742 <_vfiprintf_r+0xe2>
 800b79c:	9b03      	ldr	r3, [sp, #12]
 800b79e:	1d19      	adds	r1, r3, #4
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	9103      	str	r1, [sp, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	bfbb      	ittet	lt
 800b7a8:	425b      	neglt	r3, r3
 800b7aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b7ae:	9307      	strge	r3, [sp, #28]
 800b7b0:	9307      	strlt	r3, [sp, #28]
 800b7b2:	bfb8      	it	lt
 800b7b4:	9204      	strlt	r2, [sp, #16]
 800b7b6:	7823      	ldrb	r3, [r4, #0]
 800b7b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b7ba:	d10c      	bne.n	800b7d6 <_vfiprintf_r+0x176>
 800b7bc:	7863      	ldrb	r3, [r4, #1]
 800b7be:	2b2a      	cmp	r3, #42	; 0x2a
 800b7c0:	d135      	bne.n	800b82e <_vfiprintf_r+0x1ce>
 800b7c2:	9b03      	ldr	r3, [sp, #12]
 800b7c4:	1d1a      	adds	r2, r3, #4
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	9203      	str	r2, [sp, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	bfb8      	it	lt
 800b7ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7d2:	3402      	adds	r4, #2
 800b7d4:	9305      	str	r3, [sp, #20]
 800b7d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b8bc <_vfiprintf_r+0x25c>
 800b7da:	7821      	ldrb	r1, [r4, #0]
 800b7dc:	2203      	movs	r2, #3
 800b7de:	4650      	mov	r0, sl
 800b7e0:	f7fc fd06 	bl	80081f0 <memchr>
 800b7e4:	b140      	cbz	r0, 800b7f8 <_vfiprintf_r+0x198>
 800b7e6:	2340      	movs	r3, #64	; 0x40
 800b7e8:	eba0 000a 	sub.w	r0, r0, sl
 800b7ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b7f0:	9b04      	ldr	r3, [sp, #16]
 800b7f2:	4303      	orrs	r3, r0
 800b7f4:	3401      	adds	r4, #1
 800b7f6:	9304      	str	r3, [sp, #16]
 800b7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fc:	482c      	ldr	r0, [pc, #176]	; (800b8b0 <_vfiprintf_r+0x250>)
 800b7fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b802:	2206      	movs	r2, #6
 800b804:	f7fc fcf4 	bl	80081f0 <memchr>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d03f      	beq.n	800b88c <_vfiprintf_r+0x22c>
 800b80c:	4b29      	ldr	r3, [pc, #164]	; (800b8b4 <_vfiprintf_r+0x254>)
 800b80e:	bb1b      	cbnz	r3, 800b858 <_vfiprintf_r+0x1f8>
 800b810:	9b03      	ldr	r3, [sp, #12]
 800b812:	3307      	adds	r3, #7
 800b814:	f023 0307 	bic.w	r3, r3, #7
 800b818:	3308      	adds	r3, #8
 800b81a:	9303      	str	r3, [sp, #12]
 800b81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b81e:	443b      	add	r3, r7
 800b820:	9309      	str	r3, [sp, #36]	; 0x24
 800b822:	e767      	b.n	800b6f4 <_vfiprintf_r+0x94>
 800b824:	fb0c 3202 	mla	r2, ip, r2, r3
 800b828:	460c      	mov	r4, r1
 800b82a:	2001      	movs	r0, #1
 800b82c:	e7a5      	b.n	800b77a <_vfiprintf_r+0x11a>
 800b82e:	2300      	movs	r3, #0
 800b830:	3401      	adds	r4, #1
 800b832:	9305      	str	r3, [sp, #20]
 800b834:	4619      	mov	r1, r3
 800b836:	f04f 0c0a 	mov.w	ip, #10
 800b83a:	4620      	mov	r0, r4
 800b83c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b840:	3a30      	subs	r2, #48	; 0x30
 800b842:	2a09      	cmp	r2, #9
 800b844:	d903      	bls.n	800b84e <_vfiprintf_r+0x1ee>
 800b846:	2b00      	cmp	r3, #0
 800b848:	d0c5      	beq.n	800b7d6 <_vfiprintf_r+0x176>
 800b84a:	9105      	str	r1, [sp, #20]
 800b84c:	e7c3      	b.n	800b7d6 <_vfiprintf_r+0x176>
 800b84e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b852:	4604      	mov	r4, r0
 800b854:	2301      	movs	r3, #1
 800b856:	e7f0      	b.n	800b83a <_vfiprintf_r+0x1da>
 800b858:	ab03      	add	r3, sp, #12
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	462a      	mov	r2, r5
 800b85e:	4b16      	ldr	r3, [pc, #88]	; (800b8b8 <_vfiprintf_r+0x258>)
 800b860:	a904      	add	r1, sp, #16
 800b862:	4630      	mov	r0, r6
 800b864:	f3af 8000 	nop.w
 800b868:	4607      	mov	r7, r0
 800b86a:	1c78      	adds	r0, r7, #1
 800b86c:	d1d6      	bne.n	800b81c <_vfiprintf_r+0x1bc>
 800b86e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b870:	07d9      	lsls	r1, r3, #31
 800b872:	d405      	bmi.n	800b880 <_vfiprintf_r+0x220>
 800b874:	89ab      	ldrh	r3, [r5, #12]
 800b876:	059a      	lsls	r2, r3, #22
 800b878:	d402      	bmi.n	800b880 <_vfiprintf_r+0x220>
 800b87a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b87c:	f7ff fe31 	bl	800b4e2 <__retarget_lock_release_recursive>
 800b880:	89ab      	ldrh	r3, [r5, #12]
 800b882:	065b      	lsls	r3, r3, #25
 800b884:	f53f af12 	bmi.w	800b6ac <_vfiprintf_r+0x4c>
 800b888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b88a:	e711      	b.n	800b6b0 <_vfiprintf_r+0x50>
 800b88c:	ab03      	add	r3, sp, #12
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	462a      	mov	r2, r5
 800b892:	4b09      	ldr	r3, [pc, #36]	; (800b8b8 <_vfiprintf_r+0x258>)
 800b894:	a904      	add	r1, sp, #16
 800b896:	4630      	mov	r0, r6
 800b898:	f000 f880 	bl	800b99c <_printf_i>
 800b89c:	e7e4      	b.n	800b868 <_vfiprintf_r+0x208>
 800b89e:	bf00      	nop
 800b8a0:	0800c2a0 	.word	0x0800c2a0
 800b8a4:	0800c2c0 	.word	0x0800c2c0
 800b8a8:	0800c280 	.word	0x0800c280
 800b8ac:	0800c2e0 	.word	0x0800c2e0
 800b8b0:	0800c2ea 	.word	0x0800c2ea
 800b8b4:	00000000 	.word	0x00000000
 800b8b8:	0800b63b 	.word	0x0800b63b
 800b8bc:	0800c2e6 	.word	0x0800c2e6

0800b8c0 <_printf_common>:
 800b8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c4:	4616      	mov	r6, r2
 800b8c6:	4699      	mov	r9, r3
 800b8c8:	688a      	ldr	r2, [r1, #8]
 800b8ca:	690b      	ldr	r3, [r1, #16]
 800b8cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	bfb8      	it	lt
 800b8d4:	4613      	movlt	r3, r2
 800b8d6:	6033      	str	r3, [r6, #0]
 800b8d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8dc:	4607      	mov	r7, r0
 800b8de:	460c      	mov	r4, r1
 800b8e0:	b10a      	cbz	r2, 800b8e6 <_printf_common+0x26>
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	6033      	str	r3, [r6, #0]
 800b8e6:	6823      	ldr	r3, [r4, #0]
 800b8e8:	0699      	lsls	r1, r3, #26
 800b8ea:	bf42      	ittt	mi
 800b8ec:	6833      	ldrmi	r3, [r6, #0]
 800b8ee:	3302      	addmi	r3, #2
 800b8f0:	6033      	strmi	r3, [r6, #0]
 800b8f2:	6825      	ldr	r5, [r4, #0]
 800b8f4:	f015 0506 	ands.w	r5, r5, #6
 800b8f8:	d106      	bne.n	800b908 <_printf_common+0x48>
 800b8fa:	f104 0a19 	add.w	sl, r4, #25
 800b8fe:	68e3      	ldr	r3, [r4, #12]
 800b900:	6832      	ldr	r2, [r6, #0]
 800b902:	1a9b      	subs	r3, r3, r2
 800b904:	42ab      	cmp	r3, r5
 800b906:	dc26      	bgt.n	800b956 <_printf_common+0x96>
 800b908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b90c:	1e13      	subs	r3, r2, #0
 800b90e:	6822      	ldr	r2, [r4, #0]
 800b910:	bf18      	it	ne
 800b912:	2301      	movne	r3, #1
 800b914:	0692      	lsls	r2, r2, #26
 800b916:	d42b      	bmi.n	800b970 <_printf_common+0xb0>
 800b918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b91c:	4649      	mov	r1, r9
 800b91e:	4638      	mov	r0, r7
 800b920:	47c0      	blx	r8
 800b922:	3001      	adds	r0, #1
 800b924:	d01e      	beq.n	800b964 <_printf_common+0xa4>
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	68e5      	ldr	r5, [r4, #12]
 800b92a:	6832      	ldr	r2, [r6, #0]
 800b92c:	f003 0306 	and.w	r3, r3, #6
 800b930:	2b04      	cmp	r3, #4
 800b932:	bf08      	it	eq
 800b934:	1aad      	subeq	r5, r5, r2
 800b936:	68a3      	ldr	r3, [r4, #8]
 800b938:	6922      	ldr	r2, [r4, #16]
 800b93a:	bf0c      	ite	eq
 800b93c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b940:	2500      	movne	r5, #0
 800b942:	4293      	cmp	r3, r2
 800b944:	bfc4      	itt	gt
 800b946:	1a9b      	subgt	r3, r3, r2
 800b948:	18ed      	addgt	r5, r5, r3
 800b94a:	2600      	movs	r6, #0
 800b94c:	341a      	adds	r4, #26
 800b94e:	42b5      	cmp	r5, r6
 800b950:	d11a      	bne.n	800b988 <_printf_common+0xc8>
 800b952:	2000      	movs	r0, #0
 800b954:	e008      	b.n	800b968 <_printf_common+0xa8>
 800b956:	2301      	movs	r3, #1
 800b958:	4652      	mov	r2, sl
 800b95a:	4649      	mov	r1, r9
 800b95c:	4638      	mov	r0, r7
 800b95e:	47c0      	blx	r8
 800b960:	3001      	adds	r0, #1
 800b962:	d103      	bne.n	800b96c <_printf_common+0xac>
 800b964:	f04f 30ff 	mov.w	r0, #4294967295
 800b968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96c:	3501      	adds	r5, #1
 800b96e:	e7c6      	b.n	800b8fe <_printf_common+0x3e>
 800b970:	18e1      	adds	r1, r4, r3
 800b972:	1c5a      	adds	r2, r3, #1
 800b974:	2030      	movs	r0, #48	; 0x30
 800b976:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b97a:	4422      	add	r2, r4
 800b97c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b984:	3302      	adds	r3, #2
 800b986:	e7c7      	b.n	800b918 <_printf_common+0x58>
 800b988:	2301      	movs	r3, #1
 800b98a:	4622      	mov	r2, r4
 800b98c:	4649      	mov	r1, r9
 800b98e:	4638      	mov	r0, r7
 800b990:	47c0      	blx	r8
 800b992:	3001      	adds	r0, #1
 800b994:	d0e6      	beq.n	800b964 <_printf_common+0xa4>
 800b996:	3601      	adds	r6, #1
 800b998:	e7d9      	b.n	800b94e <_printf_common+0x8e>
	...

0800b99c <_printf_i>:
 800b99c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a0:	7e0f      	ldrb	r7, [r1, #24]
 800b9a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9a4:	2f78      	cmp	r7, #120	; 0x78
 800b9a6:	4691      	mov	r9, r2
 800b9a8:	4680      	mov	r8, r0
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	469a      	mov	sl, r3
 800b9ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9b2:	d807      	bhi.n	800b9c4 <_printf_i+0x28>
 800b9b4:	2f62      	cmp	r7, #98	; 0x62
 800b9b6:	d80a      	bhi.n	800b9ce <_printf_i+0x32>
 800b9b8:	2f00      	cmp	r7, #0
 800b9ba:	f000 80d8 	beq.w	800bb6e <_printf_i+0x1d2>
 800b9be:	2f58      	cmp	r7, #88	; 0x58
 800b9c0:	f000 80a3 	beq.w	800bb0a <_printf_i+0x16e>
 800b9c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9cc:	e03a      	b.n	800ba44 <_printf_i+0xa8>
 800b9ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9d2:	2b15      	cmp	r3, #21
 800b9d4:	d8f6      	bhi.n	800b9c4 <_printf_i+0x28>
 800b9d6:	a101      	add	r1, pc, #4	; (adr r1, 800b9dc <_printf_i+0x40>)
 800b9d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9dc:	0800ba35 	.word	0x0800ba35
 800b9e0:	0800ba49 	.word	0x0800ba49
 800b9e4:	0800b9c5 	.word	0x0800b9c5
 800b9e8:	0800b9c5 	.word	0x0800b9c5
 800b9ec:	0800b9c5 	.word	0x0800b9c5
 800b9f0:	0800b9c5 	.word	0x0800b9c5
 800b9f4:	0800ba49 	.word	0x0800ba49
 800b9f8:	0800b9c5 	.word	0x0800b9c5
 800b9fc:	0800b9c5 	.word	0x0800b9c5
 800ba00:	0800b9c5 	.word	0x0800b9c5
 800ba04:	0800b9c5 	.word	0x0800b9c5
 800ba08:	0800bb55 	.word	0x0800bb55
 800ba0c:	0800ba79 	.word	0x0800ba79
 800ba10:	0800bb37 	.word	0x0800bb37
 800ba14:	0800b9c5 	.word	0x0800b9c5
 800ba18:	0800b9c5 	.word	0x0800b9c5
 800ba1c:	0800bb77 	.word	0x0800bb77
 800ba20:	0800b9c5 	.word	0x0800b9c5
 800ba24:	0800ba79 	.word	0x0800ba79
 800ba28:	0800b9c5 	.word	0x0800b9c5
 800ba2c:	0800b9c5 	.word	0x0800b9c5
 800ba30:	0800bb3f 	.word	0x0800bb3f
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	1d1a      	adds	r2, r3, #4
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	602a      	str	r2, [r5, #0]
 800ba3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba44:	2301      	movs	r3, #1
 800ba46:	e0a3      	b.n	800bb90 <_printf_i+0x1f4>
 800ba48:	6820      	ldr	r0, [r4, #0]
 800ba4a:	6829      	ldr	r1, [r5, #0]
 800ba4c:	0606      	lsls	r6, r0, #24
 800ba4e:	f101 0304 	add.w	r3, r1, #4
 800ba52:	d50a      	bpl.n	800ba6a <_printf_i+0xce>
 800ba54:	680e      	ldr	r6, [r1, #0]
 800ba56:	602b      	str	r3, [r5, #0]
 800ba58:	2e00      	cmp	r6, #0
 800ba5a:	da03      	bge.n	800ba64 <_printf_i+0xc8>
 800ba5c:	232d      	movs	r3, #45	; 0x2d
 800ba5e:	4276      	negs	r6, r6
 800ba60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba64:	485e      	ldr	r0, [pc, #376]	; (800bbe0 <_printf_i+0x244>)
 800ba66:	230a      	movs	r3, #10
 800ba68:	e019      	b.n	800ba9e <_printf_i+0x102>
 800ba6a:	680e      	ldr	r6, [r1, #0]
 800ba6c:	602b      	str	r3, [r5, #0]
 800ba6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba72:	bf18      	it	ne
 800ba74:	b236      	sxthne	r6, r6
 800ba76:	e7ef      	b.n	800ba58 <_printf_i+0xbc>
 800ba78:	682b      	ldr	r3, [r5, #0]
 800ba7a:	6820      	ldr	r0, [r4, #0]
 800ba7c:	1d19      	adds	r1, r3, #4
 800ba7e:	6029      	str	r1, [r5, #0]
 800ba80:	0601      	lsls	r1, r0, #24
 800ba82:	d501      	bpl.n	800ba88 <_printf_i+0xec>
 800ba84:	681e      	ldr	r6, [r3, #0]
 800ba86:	e002      	b.n	800ba8e <_printf_i+0xf2>
 800ba88:	0646      	lsls	r6, r0, #25
 800ba8a:	d5fb      	bpl.n	800ba84 <_printf_i+0xe8>
 800ba8c:	881e      	ldrh	r6, [r3, #0]
 800ba8e:	4854      	ldr	r0, [pc, #336]	; (800bbe0 <_printf_i+0x244>)
 800ba90:	2f6f      	cmp	r7, #111	; 0x6f
 800ba92:	bf0c      	ite	eq
 800ba94:	2308      	moveq	r3, #8
 800ba96:	230a      	movne	r3, #10
 800ba98:	2100      	movs	r1, #0
 800ba9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba9e:	6865      	ldr	r5, [r4, #4]
 800baa0:	60a5      	str	r5, [r4, #8]
 800baa2:	2d00      	cmp	r5, #0
 800baa4:	bfa2      	ittt	ge
 800baa6:	6821      	ldrge	r1, [r4, #0]
 800baa8:	f021 0104 	bicge.w	r1, r1, #4
 800baac:	6021      	strge	r1, [r4, #0]
 800baae:	b90e      	cbnz	r6, 800bab4 <_printf_i+0x118>
 800bab0:	2d00      	cmp	r5, #0
 800bab2:	d04d      	beq.n	800bb50 <_printf_i+0x1b4>
 800bab4:	4615      	mov	r5, r2
 800bab6:	fbb6 f1f3 	udiv	r1, r6, r3
 800baba:	fb03 6711 	mls	r7, r3, r1, r6
 800babe:	5dc7      	ldrb	r7, [r0, r7]
 800bac0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bac4:	4637      	mov	r7, r6
 800bac6:	42bb      	cmp	r3, r7
 800bac8:	460e      	mov	r6, r1
 800baca:	d9f4      	bls.n	800bab6 <_printf_i+0x11a>
 800bacc:	2b08      	cmp	r3, #8
 800bace:	d10b      	bne.n	800bae8 <_printf_i+0x14c>
 800bad0:	6823      	ldr	r3, [r4, #0]
 800bad2:	07de      	lsls	r6, r3, #31
 800bad4:	d508      	bpl.n	800bae8 <_printf_i+0x14c>
 800bad6:	6923      	ldr	r3, [r4, #16]
 800bad8:	6861      	ldr	r1, [r4, #4]
 800bada:	4299      	cmp	r1, r3
 800badc:	bfde      	ittt	le
 800bade:	2330      	movle	r3, #48	; 0x30
 800bae0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bae4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bae8:	1b52      	subs	r2, r2, r5
 800baea:	6122      	str	r2, [r4, #16]
 800baec:	f8cd a000 	str.w	sl, [sp]
 800baf0:	464b      	mov	r3, r9
 800baf2:	aa03      	add	r2, sp, #12
 800baf4:	4621      	mov	r1, r4
 800baf6:	4640      	mov	r0, r8
 800baf8:	f7ff fee2 	bl	800b8c0 <_printf_common>
 800bafc:	3001      	adds	r0, #1
 800bafe:	d14c      	bne.n	800bb9a <_printf_i+0x1fe>
 800bb00:	f04f 30ff 	mov.w	r0, #4294967295
 800bb04:	b004      	add	sp, #16
 800bb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0a:	4835      	ldr	r0, [pc, #212]	; (800bbe0 <_printf_i+0x244>)
 800bb0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bb10:	6829      	ldr	r1, [r5, #0]
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb18:	6029      	str	r1, [r5, #0]
 800bb1a:	061d      	lsls	r5, r3, #24
 800bb1c:	d514      	bpl.n	800bb48 <_printf_i+0x1ac>
 800bb1e:	07df      	lsls	r7, r3, #31
 800bb20:	bf44      	itt	mi
 800bb22:	f043 0320 	orrmi.w	r3, r3, #32
 800bb26:	6023      	strmi	r3, [r4, #0]
 800bb28:	b91e      	cbnz	r6, 800bb32 <_printf_i+0x196>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	f023 0320 	bic.w	r3, r3, #32
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	2310      	movs	r3, #16
 800bb34:	e7b0      	b.n	800ba98 <_printf_i+0xfc>
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	f043 0320 	orr.w	r3, r3, #32
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	2378      	movs	r3, #120	; 0x78
 800bb40:	4828      	ldr	r0, [pc, #160]	; (800bbe4 <_printf_i+0x248>)
 800bb42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb46:	e7e3      	b.n	800bb10 <_printf_i+0x174>
 800bb48:	0659      	lsls	r1, r3, #25
 800bb4a:	bf48      	it	mi
 800bb4c:	b2b6      	uxthmi	r6, r6
 800bb4e:	e7e6      	b.n	800bb1e <_printf_i+0x182>
 800bb50:	4615      	mov	r5, r2
 800bb52:	e7bb      	b.n	800bacc <_printf_i+0x130>
 800bb54:	682b      	ldr	r3, [r5, #0]
 800bb56:	6826      	ldr	r6, [r4, #0]
 800bb58:	6961      	ldr	r1, [r4, #20]
 800bb5a:	1d18      	adds	r0, r3, #4
 800bb5c:	6028      	str	r0, [r5, #0]
 800bb5e:	0635      	lsls	r5, r6, #24
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	d501      	bpl.n	800bb68 <_printf_i+0x1cc>
 800bb64:	6019      	str	r1, [r3, #0]
 800bb66:	e002      	b.n	800bb6e <_printf_i+0x1d2>
 800bb68:	0670      	lsls	r0, r6, #25
 800bb6a:	d5fb      	bpl.n	800bb64 <_printf_i+0x1c8>
 800bb6c:	8019      	strh	r1, [r3, #0]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	6123      	str	r3, [r4, #16]
 800bb72:	4615      	mov	r5, r2
 800bb74:	e7ba      	b.n	800baec <_printf_i+0x150>
 800bb76:	682b      	ldr	r3, [r5, #0]
 800bb78:	1d1a      	adds	r2, r3, #4
 800bb7a:	602a      	str	r2, [r5, #0]
 800bb7c:	681d      	ldr	r5, [r3, #0]
 800bb7e:	6862      	ldr	r2, [r4, #4]
 800bb80:	2100      	movs	r1, #0
 800bb82:	4628      	mov	r0, r5
 800bb84:	f7fc fb34 	bl	80081f0 <memchr>
 800bb88:	b108      	cbz	r0, 800bb8e <_printf_i+0x1f2>
 800bb8a:	1b40      	subs	r0, r0, r5
 800bb8c:	6060      	str	r0, [r4, #4]
 800bb8e:	6863      	ldr	r3, [r4, #4]
 800bb90:	6123      	str	r3, [r4, #16]
 800bb92:	2300      	movs	r3, #0
 800bb94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb98:	e7a8      	b.n	800baec <_printf_i+0x150>
 800bb9a:	6923      	ldr	r3, [r4, #16]
 800bb9c:	462a      	mov	r2, r5
 800bb9e:	4649      	mov	r1, r9
 800bba0:	4640      	mov	r0, r8
 800bba2:	47d0      	blx	sl
 800bba4:	3001      	adds	r0, #1
 800bba6:	d0ab      	beq.n	800bb00 <_printf_i+0x164>
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	079b      	lsls	r3, r3, #30
 800bbac:	d413      	bmi.n	800bbd6 <_printf_i+0x23a>
 800bbae:	68e0      	ldr	r0, [r4, #12]
 800bbb0:	9b03      	ldr	r3, [sp, #12]
 800bbb2:	4298      	cmp	r0, r3
 800bbb4:	bfb8      	it	lt
 800bbb6:	4618      	movlt	r0, r3
 800bbb8:	e7a4      	b.n	800bb04 <_printf_i+0x168>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	4632      	mov	r2, r6
 800bbbe:	4649      	mov	r1, r9
 800bbc0:	4640      	mov	r0, r8
 800bbc2:	47d0      	blx	sl
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	d09b      	beq.n	800bb00 <_printf_i+0x164>
 800bbc8:	3501      	adds	r5, #1
 800bbca:	68e3      	ldr	r3, [r4, #12]
 800bbcc:	9903      	ldr	r1, [sp, #12]
 800bbce:	1a5b      	subs	r3, r3, r1
 800bbd0:	42ab      	cmp	r3, r5
 800bbd2:	dcf2      	bgt.n	800bbba <_printf_i+0x21e>
 800bbd4:	e7eb      	b.n	800bbae <_printf_i+0x212>
 800bbd6:	2500      	movs	r5, #0
 800bbd8:	f104 0619 	add.w	r6, r4, #25
 800bbdc:	e7f5      	b.n	800bbca <_printf_i+0x22e>
 800bbde:	bf00      	nop
 800bbe0:	0800c2f1 	.word	0x0800c2f1
 800bbe4:	0800c302 	.word	0x0800c302

0800bbe8 <_sbrk_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4d06      	ldr	r5, [pc, #24]	; (800bc04 <_sbrk_r+0x1c>)
 800bbec:	2300      	movs	r3, #0
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	f7fc fee0 	bl	80089b8 <_sbrk>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_sbrk_r+0x1a>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_sbrk_r+0x1a>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	20000124 	.word	0x20000124

0800bc08 <__sread>:
 800bc08:	b510      	push	{r4, lr}
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc10:	f000 fab2 	bl	800c178 <_read_r>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	bfab      	itete	ge
 800bc18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc1a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc1c:	181b      	addge	r3, r3, r0
 800bc1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc22:	bfac      	ite	ge
 800bc24:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc26:	81a3      	strhlt	r3, [r4, #12]
 800bc28:	bd10      	pop	{r4, pc}

0800bc2a <__swrite>:
 800bc2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2e:	461f      	mov	r7, r3
 800bc30:	898b      	ldrh	r3, [r1, #12]
 800bc32:	05db      	lsls	r3, r3, #23
 800bc34:	4605      	mov	r5, r0
 800bc36:	460c      	mov	r4, r1
 800bc38:	4616      	mov	r6, r2
 800bc3a:	d505      	bpl.n	800bc48 <__swrite+0x1e>
 800bc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc40:	2302      	movs	r3, #2
 800bc42:	2200      	movs	r2, #0
 800bc44:	f000 f9c8 	bl	800bfd8 <_lseek_r>
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc52:	81a3      	strh	r3, [r4, #12]
 800bc54:	4632      	mov	r2, r6
 800bc56:	463b      	mov	r3, r7
 800bc58:	4628      	mov	r0, r5
 800bc5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5e:	f000 b869 	b.w	800bd34 <_write_r>

0800bc62 <__sseek>:
 800bc62:	b510      	push	{r4, lr}
 800bc64:	460c      	mov	r4, r1
 800bc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc6a:	f000 f9b5 	bl	800bfd8 <_lseek_r>
 800bc6e:	1c43      	adds	r3, r0, #1
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	bf15      	itete	ne
 800bc74:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc7e:	81a3      	strheq	r3, [r4, #12]
 800bc80:	bf18      	it	ne
 800bc82:	81a3      	strhne	r3, [r4, #12]
 800bc84:	bd10      	pop	{r4, pc}

0800bc86 <__sclose>:
 800bc86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8a:	f000 b8d3 	b.w	800be34 <_close_r>
	...

0800bc90 <__swbuf_r>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	460e      	mov	r6, r1
 800bc94:	4614      	mov	r4, r2
 800bc96:	4605      	mov	r5, r0
 800bc98:	b118      	cbz	r0, 800bca2 <__swbuf_r+0x12>
 800bc9a:	6983      	ldr	r3, [r0, #24]
 800bc9c:	b90b      	cbnz	r3, 800bca2 <__swbuf_r+0x12>
 800bc9e:	f7ff fb81 	bl	800b3a4 <__sinit>
 800bca2:	4b21      	ldr	r3, [pc, #132]	; (800bd28 <__swbuf_r+0x98>)
 800bca4:	429c      	cmp	r4, r3
 800bca6:	d12b      	bne.n	800bd00 <__swbuf_r+0x70>
 800bca8:	686c      	ldr	r4, [r5, #4]
 800bcaa:	69a3      	ldr	r3, [r4, #24]
 800bcac:	60a3      	str	r3, [r4, #8]
 800bcae:	89a3      	ldrh	r3, [r4, #12]
 800bcb0:	071a      	lsls	r2, r3, #28
 800bcb2:	d52f      	bpl.n	800bd14 <__swbuf_r+0x84>
 800bcb4:	6923      	ldr	r3, [r4, #16]
 800bcb6:	b36b      	cbz	r3, 800bd14 <__swbuf_r+0x84>
 800bcb8:	6923      	ldr	r3, [r4, #16]
 800bcba:	6820      	ldr	r0, [r4, #0]
 800bcbc:	1ac0      	subs	r0, r0, r3
 800bcbe:	6963      	ldr	r3, [r4, #20]
 800bcc0:	b2f6      	uxtb	r6, r6
 800bcc2:	4283      	cmp	r3, r0
 800bcc4:	4637      	mov	r7, r6
 800bcc6:	dc04      	bgt.n	800bcd2 <__swbuf_r+0x42>
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4628      	mov	r0, r5
 800bccc:	f000 f948 	bl	800bf60 <_fflush_r>
 800bcd0:	bb30      	cbnz	r0, 800bd20 <__swbuf_r+0x90>
 800bcd2:	68a3      	ldr	r3, [r4, #8]
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	60a3      	str	r3, [r4, #8]
 800bcd8:	6823      	ldr	r3, [r4, #0]
 800bcda:	1c5a      	adds	r2, r3, #1
 800bcdc:	6022      	str	r2, [r4, #0]
 800bcde:	701e      	strb	r6, [r3, #0]
 800bce0:	6963      	ldr	r3, [r4, #20]
 800bce2:	3001      	adds	r0, #1
 800bce4:	4283      	cmp	r3, r0
 800bce6:	d004      	beq.n	800bcf2 <__swbuf_r+0x62>
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	07db      	lsls	r3, r3, #31
 800bcec:	d506      	bpl.n	800bcfc <__swbuf_r+0x6c>
 800bcee:	2e0a      	cmp	r6, #10
 800bcf0:	d104      	bne.n	800bcfc <__swbuf_r+0x6c>
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	f000 f933 	bl	800bf60 <_fflush_r>
 800bcfa:	b988      	cbnz	r0, 800bd20 <__swbuf_r+0x90>
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd00:	4b0a      	ldr	r3, [pc, #40]	; (800bd2c <__swbuf_r+0x9c>)
 800bd02:	429c      	cmp	r4, r3
 800bd04:	d101      	bne.n	800bd0a <__swbuf_r+0x7a>
 800bd06:	68ac      	ldr	r4, [r5, #8]
 800bd08:	e7cf      	b.n	800bcaa <__swbuf_r+0x1a>
 800bd0a:	4b09      	ldr	r3, [pc, #36]	; (800bd30 <__swbuf_r+0xa0>)
 800bd0c:	429c      	cmp	r4, r3
 800bd0e:	bf08      	it	eq
 800bd10:	68ec      	ldreq	r4, [r5, #12]
 800bd12:	e7ca      	b.n	800bcaa <__swbuf_r+0x1a>
 800bd14:	4621      	mov	r1, r4
 800bd16:	4628      	mov	r0, r5
 800bd18:	f000 f81e 	bl	800bd58 <__swsetup_r>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d0cb      	beq.n	800bcb8 <__swbuf_r+0x28>
 800bd20:	f04f 37ff 	mov.w	r7, #4294967295
 800bd24:	e7ea      	b.n	800bcfc <__swbuf_r+0x6c>
 800bd26:	bf00      	nop
 800bd28:	0800c2a0 	.word	0x0800c2a0
 800bd2c:	0800c2c0 	.word	0x0800c2c0
 800bd30:	0800c280 	.word	0x0800c280

0800bd34 <_write_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4d07      	ldr	r5, [pc, #28]	; (800bd54 <_write_r+0x20>)
 800bd38:	4604      	mov	r4, r0
 800bd3a:	4608      	mov	r0, r1
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	2200      	movs	r2, #0
 800bd40:	602a      	str	r2, [r5, #0]
 800bd42:	461a      	mov	r2, r3
 800bd44:	f7fc fde7 	bl	8008916 <_write>
 800bd48:	1c43      	adds	r3, r0, #1
 800bd4a:	d102      	bne.n	800bd52 <_write_r+0x1e>
 800bd4c:	682b      	ldr	r3, [r5, #0]
 800bd4e:	b103      	cbz	r3, 800bd52 <_write_r+0x1e>
 800bd50:	6023      	str	r3, [r4, #0]
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	20000124 	.word	0x20000124

0800bd58 <__swsetup_r>:
 800bd58:	4b32      	ldr	r3, [pc, #200]	; (800be24 <__swsetup_r+0xcc>)
 800bd5a:	b570      	push	{r4, r5, r6, lr}
 800bd5c:	681d      	ldr	r5, [r3, #0]
 800bd5e:	4606      	mov	r6, r0
 800bd60:	460c      	mov	r4, r1
 800bd62:	b125      	cbz	r5, 800bd6e <__swsetup_r+0x16>
 800bd64:	69ab      	ldr	r3, [r5, #24]
 800bd66:	b913      	cbnz	r3, 800bd6e <__swsetup_r+0x16>
 800bd68:	4628      	mov	r0, r5
 800bd6a:	f7ff fb1b 	bl	800b3a4 <__sinit>
 800bd6e:	4b2e      	ldr	r3, [pc, #184]	; (800be28 <__swsetup_r+0xd0>)
 800bd70:	429c      	cmp	r4, r3
 800bd72:	d10f      	bne.n	800bd94 <__swsetup_r+0x3c>
 800bd74:	686c      	ldr	r4, [r5, #4]
 800bd76:	89a3      	ldrh	r3, [r4, #12]
 800bd78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd7c:	0719      	lsls	r1, r3, #28
 800bd7e:	d42c      	bmi.n	800bdda <__swsetup_r+0x82>
 800bd80:	06dd      	lsls	r5, r3, #27
 800bd82:	d411      	bmi.n	800bda8 <__swsetup_r+0x50>
 800bd84:	2309      	movs	r3, #9
 800bd86:	6033      	str	r3, [r6, #0]
 800bd88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd8c:	81a3      	strh	r3, [r4, #12]
 800bd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd92:	e03e      	b.n	800be12 <__swsetup_r+0xba>
 800bd94:	4b25      	ldr	r3, [pc, #148]	; (800be2c <__swsetup_r+0xd4>)
 800bd96:	429c      	cmp	r4, r3
 800bd98:	d101      	bne.n	800bd9e <__swsetup_r+0x46>
 800bd9a:	68ac      	ldr	r4, [r5, #8]
 800bd9c:	e7eb      	b.n	800bd76 <__swsetup_r+0x1e>
 800bd9e:	4b24      	ldr	r3, [pc, #144]	; (800be30 <__swsetup_r+0xd8>)
 800bda0:	429c      	cmp	r4, r3
 800bda2:	bf08      	it	eq
 800bda4:	68ec      	ldreq	r4, [r5, #12]
 800bda6:	e7e6      	b.n	800bd76 <__swsetup_r+0x1e>
 800bda8:	0758      	lsls	r0, r3, #29
 800bdaa:	d512      	bpl.n	800bdd2 <__swsetup_r+0x7a>
 800bdac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdae:	b141      	cbz	r1, 800bdc2 <__swsetup_r+0x6a>
 800bdb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdb4:	4299      	cmp	r1, r3
 800bdb6:	d002      	beq.n	800bdbe <__swsetup_r+0x66>
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f000 f991 	bl	800c0e0 <_free_r>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	6363      	str	r3, [r4, #52]	; 0x34
 800bdc2:	89a3      	ldrh	r3, [r4, #12]
 800bdc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdc8:	81a3      	strh	r3, [r4, #12]
 800bdca:	2300      	movs	r3, #0
 800bdcc:	6063      	str	r3, [r4, #4]
 800bdce:	6923      	ldr	r3, [r4, #16]
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	f043 0308 	orr.w	r3, r3, #8
 800bdd8:	81a3      	strh	r3, [r4, #12]
 800bdda:	6923      	ldr	r3, [r4, #16]
 800bddc:	b94b      	cbnz	r3, 800bdf2 <__swsetup_r+0x9a>
 800bdde:	89a3      	ldrh	r3, [r4, #12]
 800bde0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bde4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bde8:	d003      	beq.n	800bdf2 <__swsetup_r+0x9a>
 800bdea:	4621      	mov	r1, r4
 800bdec:	4630      	mov	r0, r6
 800bdee:	f000 f92b 	bl	800c048 <__smakebuf_r>
 800bdf2:	89a0      	ldrh	r0, [r4, #12]
 800bdf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdf8:	f010 0301 	ands.w	r3, r0, #1
 800bdfc:	d00a      	beq.n	800be14 <__swsetup_r+0xbc>
 800bdfe:	2300      	movs	r3, #0
 800be00:	60a3      	str	r3, [r4, #8]
 800be02:	6963      	ldr	r3, [r4, #20]
 800be04:	425b      	negs	r3, r3
 800be06:	61a3      	str	r3, [r4, #24]
 800be08:	6923      	ldr	r3, [r4, #16]
 800be0a:	b943      	cbnz	r3, 800be1e <__swsetup_r+0xc6>
 800be0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be10:	d1ba      	bne.n	800bd88 <__swsetup_r+0x30>
 800be12:	bd70      	pop	{r4, r5, r6, pc}
 800be14:	0781      	lsls	r1, r0, #30
 800be16:	bf58      	it	pl
 800be18:	6963      	ldrpl	r3, [r4, #20]
 800be1a:	60a3      	str	r3, [r4, #8]
 800be1c:	e7f4      	b.n	800be08 <__swsetup_r+0xb0>
 800be1e:	2000      	movs	r0, #0
 800be20:	e7f7      	b.n	800be12 <__swsetup_r+0xba>
 800be22:	bf00      	nop
 800be24:	2000000c 	.word	0x2000000c
 800be28:	0800c2a0 	.word	0x0800c2a0
 800be2c:	0800c2c0 	.word	0x0800c2c0
 800be30:	0800c280 	.word	0x0800c280

0800be34 <_close_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4d06      	ldr	r5, [pc, #24]	; (800be50 <_close_r+0x1c>)
 800be38:	2300      	movs	r3, #0
 800be3a:	4604      	mov	r4, r0
 800be3c:	4608      	mov	r0, r1
 800be3e:	602b      	str	r3, [r5, #0]
 800be40:	f7fc fd85 	bl	800894e <_close>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d102      	bne.n	800be4e <_close_r+0x1a>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	b103      	cbz	r3, 800be4e <_close_r+0x1a>
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	20000124 	.word	0x20000124

0800be54 <__sflush_r>:
 800be54:	898a      	ldrh	r2, [r1, #12]
 800be56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5a:	4605      	mov	r5, r0
 800be5c:	0710      	lsls	r0, r2, #28
 800be5e:	460c      	mov	r4, r1
 800be60:	d458      	bmi.n	800bf14 <__sflush_r+0xc0>
 800be62:	684b      	ldr	r3, [r1, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	dc05      	bgt.n	800be74 <__sflush_r+0x20>
 800be68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	dc02      	bgt.n	800be74 <__sflush_r+0x20>
 800be6e:	2000      	movs	r0, #0
 800be70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be76:	2e00      	cmp	r6, #0
 800be78:	d0f9      	beq.n	800be6e <__sflush_r+0x1a>
 800be7a:	2300      	movs	r3, #0
 800be7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be80:	682f      	ldr	r7, [r5, #0]
 800be82:	602b      	str	r3, [r5, #0]
 800be84:	d032      	beq.n	800beec <__sflush_r+0x98>
 800be86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be88:	89a3      	ldrh	r3, [r4, #12]
 800be8a:	075a      	lsls	r2, r3, #29
 800be8c:	d505      	bpl.n	800be9a <__sflush_r+0x46>
 800be8e:	6863      	ldr	r3, [r4, #4]
 800be90:	1ac0      	subs	r0, r0, r3
 800be92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be94:	b10b      	cbz	r3, 800be9a <__sflush_r+0x46>
 800be96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be98:	1ac0      	subs	r0, r0, r3
 800be9a:	2300      	movs	r3, #0
 800be9c:	4602      	mov	r2, r0
 800be9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bea0:	6a21      	ldr	r1, [r4, #32]
 800bea2:	4628      	mov	r0, r5
 800bea4:	47b0      	blx	r6
 800bea6:	1c43      	adds	r3, r0, #1
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	d106      	bne.n	800beba <__sflush_r+0x66>
 800beac:	6829      	ldr	r1, [r5, #0]
 800beae:	291d      	cmp	r1, #29
 800beb0:	d82c      	bhi.n	800bf0c <__sflush_r+0xb8>
 800beb2:	4a2a      	ldr	r2, [pc, #168]	; (800bf5c <__sflush_r+0x108>)
 800beb4:	40ca      	lsrs	r2, r1
 800beb6:	07d6      	lsls	r6, r2, #31
 800beb8:	d528      	bpl.n	800bf0c <__sflush_r+0xb8>
 800beba:	2200      	movs	r2, #0
 800bebc:	6062      	str	r2, [r4, #4]
 800bebe:	04d9      	lsls	r1, r3, #19
 800bec0:	6922      	ldr	r2, [r4, #16]
 800bec2:	6022      	str	r2, [r4, #0]
 800bec4:	d504      	bpl.n	800bed0 <__sflush_r+0x7c>
 800bec6:	1c42      	adds	r2, r0, #1
 800bec8:	d101      	bne.n	800bece <__sflush_r+0x7a>
 800beca:	682b      	ldr	r3, [r5, #0]
 800becc:	b903      	cbnz	r3, 800bed0 <__sflush_r+0x7c>
 800bece:	6560      	str	r0, [r4, #84]	; 0x54
 800bed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bed2:	602f      	str	r7, [r5, #0]
 800bed4:	2900      	cmp	r1, #0
 800bed6:	d0ca      	beq.n	800be6e <__sflush_r+0x1a>
 800bed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bedc:	4299      	cmp	r1, r3
 800bede:	d002      	beq.n	800bee6 <__sflush_r+0x92>
 800bee0:	4628      	mov	r0, r5
 800bee2:	f000 f8fd 	bl	800c0e0 <_free_r>
 800bee6:	2000      	movs	r0, #0
 800bee8:	6360      	str	r0, [r4, #52]	; 0x34
 800beea:	e7c1      	b.n	800be70 <__sflush_r+0x1c>
 800beec:	6a21      	ldr	r1, [r4, #32]
 800beee:	2301      	movs	r3, #1
 800bef0:	4628      	mov	r0, r5
 800bef2:	47b0      	blx	r6
 800bef4:	1c41      	adds	r1, r0, #1
 800bef6:	d1c7      	bne.n	800be88 <__sflush_r+0x34>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d0c4      	beq.n	800be88 <__sflush_r+0x34>
 800befe:	2b1d      	cmp	r3, #29
 800bf00:	d001      	beq.n	800bf06 <__sflush_r+0xb2>
 800bf02:	2b16      	cmp	r3, #22
 800bf04:	d101      	bne.n	800bf0a <__sflush_r+0xb6>
 800bf06:	602f      	str	r7, [r5, #0]
 800bf08:	e7b1      	b.n	800be6e <__sflush_r+0x1a>
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf10:	81a3      	strh	r3, [r4, #12]
 800bf12:	e7ad      	b.n	800be70 <__sflush_r+0x1c>
 800bf14:	690f      	ldr	r7, [r1, #16]
 800bf16:	2f00      	cmp	r7, #0
 800bf18:	d0a9      	beq.n	800be6e <__sflush_r+0x1a>
 800bf1a:	0793      	lsls	r3, r2, #30
 800bf1c:	680e      	ldr	r6, [r1, #0]
 800bf1e:	bf08      	it	eq
 800bf20:	694b      	ldreq	r3, [r1, #20]
 800bf22:	600f      	str	r7, [r1, #0]
 800bf24:	bf18      	it	ne
 800bf26:	2300      	movne	r3, #0
 800bf28:	eba6 0807 	sub.w	r8, r6, r7
 800bf2c:	608b      	str	r3, [r1, #8]
 800bf2e:	f1b8 0f00 	cmp.w	r8, #0
 800bf32:	dd9c      	ble.n	800be6e <__sflush_r+0x1a>
 800bf34:	6a21      	ldr	r1, [r4, #32]
 800bf36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf38:	4643      	mov	r3, r8
 800bf3a:	463a      	mov	r2, r7
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	47b0      	blx	r6
 800bf40:	2800      	cmp	r0, #0
 800bf42:	dc06      	bgt.n	800bf52 <__sflush_r+0xfe>
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e78e      	b.n	800be70 <__sflush_r+0x1c>
 800bf52:	4407      	add	r7, r0
 800bf54:	eba8 0800 	sub.w	r8, r8, r0
 800bf58:	e7e9      	b.n	800bf2e <__sflush_r+0xda>
 800bf5a:	bf00      	nop
 800bf5c:	20400001 	.word	0x20400001

0800bf60 <_fflush_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	690b      	ldr	r3, [r1, #16]
 800bf64:	4605      	mov	r5, r0
 800bf66:	460c      	mov	r4, r1
 800bf68:	b913      	cbnz	r3, 800bf70 <_fflush_r+0x10>
 800bf6a:	2500      	movs	r5, #0
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	b118      	cbz	r0, 800bf7a <_fflush_r+0x1a>
 800bf72:	6983      	ldr	r3, [r0, #24]
 800bf74:	b90b      	cbnz	r3, 800bf7a <_fflush_r+0x1a>
 800bf76:	f7ff fa15 	bl	800b3a4 <__sinit>
 800bf7a:	4b14      	ldr	r3, [pc, #80]	; (800bfcc <_fflush_r+0x6c>)
 800bf7c:	429c      	cmp	r4, r3
 800bf7e:	d11b      	bne.n	800bfb8 <_fflush_r+0x58>
 800bf80:	686c      	ldr	r4, [r5, #4]
 800bf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d0ef      	beq.n	800bf6a <_fflush_r+0xa>
 800bf8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf8c:	07d0      	lsls	r0, r2, #31
 800bf8e:	d404      	bmi.n	800bf9a <_fflush_r+0x3a>
 800bf90:	0599      	lsls	r1, r3, #22
 800bf92:	d402      	bmi.n	800bf9a <_fflush_r+0x3a>
 800bf94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf96:	f7ff faa3 	bl	800b4e0 <__retarget_lock_acquire_recursive>
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	f7ff ff59 	bl	800be54 <__sflush_r>
 800bfa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfa4:	07da      	lsls	r2, r3, #31
 800bfa6:	4605      	mov	r5, r0
 800bfa8:	d4e0      	bmi.n	800bf6c <_fflush_r+0xc>
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	059b      	lsls	r3, r3, #22
 800bfae:	d4dd      	bmi.n	800bf6c <_fflush_r+0xc>
 800bfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfb2:	f7ff fa96 	bl	800b4e2 <__retarget_lock_release_recursive>
 800bfb6:	e7d9      	b.n	800bf6c <_fflush_r+0xc>
 800bfb8:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <_fflush_r+0x70>)
 800bfba:	429c      	cmp	r4, r3
 800bfbc:	d101      	bne.n	800bfc2 <_fflush_r+0x62>
 800bfbe:	68ac      	ldr	r4, [r5, #8]
 800bfc0:	e7df      	b.n	800bf82 <_fflush_r+0x22>
 800bfc2:	4b04      	ldr	r3, [pc, #16]	; (800bfd4 <_fflush_r+0x74>)
 800bfc4:	429c      	cmp	r4, r3
 800bfc6:	bf08      	it	eq
 800bfc8:	68ec      	ldreq	r4, [r5, #12]
 800bfca:	e7da      	b.n	800bf82 <_fflush_r+0x22>
 800bfcc:	0800c2a0 	.word	0x0800c2a0
 800bfd0:	0800c2c0 	.word	0x0800c2c0
 800bfd4:	0800c280 	.word	0x0800c280

0800bfd8 <_lseek_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	4d07      	ldr	r5, [pc, #28]	; (800bff8 <_lseek_r+0x20>)
 800bfdc:	4604      	mov	r4, r0
 800bfde:	4608      	mov	r0, r1
 800bfe0:	4611      	mov	r1, r2
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	602a      	str	r2, [r5, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	f7fc fcd8 	bl	800899c <_lseek>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	d102      	bne.n	800bff6 <_lseek_r+0x1e>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	b103      	cbz	r3, 800bff6 <_lseek_r+0x1e>
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	20000124 	.word	0x20000124

0800bffc <__swhatbuf_r>:
 800bffc:	b570      	push	{r4, r5, r6, lr}
 800bffe:	460e      	mov	r6, r1
 800c000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c004:	2900      	cmp	r1, #0
 800c006:	b096      	sub	sp, #88	; 0x58
 800c008:	4614      	mov	r4, r2
 800c00a:	461d      	mov	r5, r3
 800c00c:	da08      	bge.n	800c020 <__swhatbuf_r+0x24>
 800c00e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c012:	2200      	movs	r2, #0
 800c014:	602a      	str	r2, [r5, #0]
 800c016:	061a      	lsls	r2, r3, #24
 800c018:	d410      	bmi.n	800c03c <__swhatbuf_r+0x40>
 800c01a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c01e:	e00e      	b.n	800c03e <__swhatbuf_r+0x42>
 800c020:	466a      	mov	r2, sp
 800c022:	f000 f8bb 	bl	800c19c <_fstat_r>
 800c026:	2800      	cmp	r0, #0
 800c028:	dbf1      	blt.n	800c00e <__swhatbuf_r+0x12>
 800c02a:	9a01      	ldr	r2, [sp, #4]
 800c02c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c030:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c034:	425a      	negs	r2, r3
 800c036:	415a      	adcs	r2, r3
 800c038:	602a      	str	r2, [r5, #0]
 800c03a:	e7ee      	b.n	800c01a <__swhatbuf_r+0x1e>
 800c03c:	2340      	movs	r3, #64	; 0x40
 800c03e:	2000      	movs	r0, #0
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	b016      	add	sp, #88	; 0x58
 800c044:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c048 <__smakebuf_r>:
 800c048:	898b      	ldrh	r3, [r1, #12]
 800c04a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c04c:	079d      	lsls	r5, r3, #30
 800c04e:	4606      	mov	r6, r0
 800c050:	460c      	mov	r4, r1
 800c052:	d507      	bpl.n	800c064 <__smakebuf_r+0x1c>
 800c054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	6123      	str	r3, [r4, #16]
 800c05c:	2301      	movs	r3, #1
 800c05e:	6163      	str	r3, [r4, #20]
 800c060:	b002      	add	sp, #8
 800c062:	bd70      	pop	{r4, r5, r6, pc}
 800c064:	ab01      	add	r3, sp, #4
 800c066:	466a      	mov	r2, sp
 800c068:	f7ff ffc8 	bl	800bffc <__swhatbuf_r>
 800c06c:	9900      	ldr	r1, [sp, #0]
 800c06e:	4605      	mov	r5, r0
 800c070:	4630      	mov	r0, r6
 800c072:	f7ff fa57 	bl	800b524 <_malloc_r>
 800c076:	b948      	cbnz	r0, 800c08c <__smakebuf_r+0x44>
 800c078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c07c:	059a      	lsls	r2, r3, #22
 800c07e:	d4ef      	bmi.n	800c060 <__smakebuf_r+0x18>
 800c080:	f023 0303 	bic.w	r3, r3, #3
 800c084:	f043 0302 	orr.w	r3, r3, #2
 800c088:	81a3      	strh	r3, [r4, #12]
 800c08a:	e7e3      	b.n	800c054 <__smakebuf_r+0xc>
 800c08c:	4b0d      	ldr	r3, [pc, #52]	; (800c0c4 <__smakebuf_r+0x7c>)
 800c08e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	6020      	str	r0, [r4, #0]
 800c094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c098:	81a3      	strh	r3, [r4, #12]
 800c09a:	9b00      	ldr	r3, [sp, #0]
 800c09c:	6163      	str	r3, [r4, #20]
 800c09e:	9b01      	ldr	r3, [sp, #4]
 800c0a0:	6120      	str	r0, [r4, #16]
 800c0a2:	b15b      	cbz	r3, 800c0bc <__smakebuf_r+0x74>
 800c0a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f000 f889 	bl	800c1c0 <_isatty_r>
 800c0ae:	b128      	cbz	r0, 800c0bc <__smakebuf_r+0x74>
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	f023 0303 	bic.w	r3, r3, #3
 800c0b6:	f043 0301 	orr.w	r3, r3, #1
 800c0ba:	81a3      	strh	r3, [r4, #12]
 800c0bc:	89a0      	ldrh	r0, [r4, #12]
 800c0be:	4305      	orrs	r5, r0
 800c0c0:	81a5      	strh	r5, [r4, #12]
 800c0c2:	e7cd      	b.n	800c060 <__smakebuf_r+0x18>
 800c0c4:	0800b33d 	.word	0x0800b33d

0800c0c8 <__malloc_lock>:
 800c0c8:	4801      	ldr	r0, [pc, #4]	; (800c0d0 <__malloc_lock+0x8>)
 800c0ca:	f7ff ba09 	b.w	800b4e0 <__retarget_lock_acquire_recursive>
 800c0ce:	bf00      	nop
 800c0d0:	20000118 	.word	0x20000118

0800c0d4 <__malloc_unlock>:
 800c0d4:	4801      	ldr	r0, [pc, #4]	; (800c0dc <__malloc_unlock+0x8>)
 800c0d6:	f7ff ba04 	b.w	800b4e2 <__retarget_lock_release_recursive>
 800c0da:	bf00      	nop
 800c0dc:	20000118 	.word	0x20000118

0800c0e0 <_free_r>:
 800c0e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0e2:	2900      	cmp	r1, #0
 800c0e4:	d044      	beq.n	800c170 <_free_r+0x90>
 800c0e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ea:	9001      	str	r0, [sp, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f1a1 0404 	sub.w	r4, r1, #4
 800c0f2:	bfb8      	it	lt
 800c0f4:	18e4      	addlt	r4, r4, r3
 800c0f6:	f7ff ffe7 	bl	800c0c8 <__malloc_lock>
 800c0fa:	4a1e      	ldr	r2, [pc, #120]	; (800c174 <_free_r+0x94>)
 800c0fc:	9801      	ldr	r0, [sp, #4]
 800c0fe:	6813      	ldr	r3, [r2, #0]
 800c100:	b933      	cbnz	r3, 800c110 <_free_r+0x30>
 800c102:	6063      	str	r3, [r4, #4]
 800c104:	6014      	str	r4, [r2, #0]
 800c106:	b003      	add	sp, #12
 800c108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c10c:	f7ff bfe2 	b.w	800c0d4 <__malloc_unlock>
 800c110:	42a3      	cmp	r3, r4
 800c112:	d908      	bls.n	800c126 <_free_r+0x46>
 800c114:	6825      	ldr	r5, [r4, #0]
 800c116:	1961      	adds	r1, r4, r5
 800c118:	428b      	cmp	r3, r1
 800c11a:	bf01      	itttt	eq
 800c11c:	6819      	ldreq	r1, [r3, #0]
 800c11e:	685b      	ldreq	r3, [r3, #4]
 800c120:	1949      	addeq	r1, r1, r5
 800c122:	6021      	streq	r1, [r4, #0]
 800c124:	e7ed      	b.n	800c102 <_free_r+0x22>
 800c126:	461a      	mov	r2, r3
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	b10b      	cbz	r3, 800c130 <_free_r+0x50>
 800c12c:	42a3      	cmp	r3, r4
 800c12e:	d9fa      	bls.n	800c126 <_free_r+0x46>
 800c130:	6811      	ldr	r1, [r2, #0]
 800c132:	1855      	adds	r5, r2, r1
 800c134:	42a5      	cmp	r5, r4
 800c136:	d10b      	bne.n	800c150 <_free_r+0x70>
 800c138:	6824      	ldr	r4, [r4, #0]
 800c13a:	4421      	add	r1, r4
 800c13c:	1854      	adds	r4, r2, r1
 800c13e:	42a3      	cmp	r3, r4
 800c140:	6011      	str	r1, [r2, #0]
 800c142:	d1e0      	bne.n	800c106 <_free_r+0x26>
 800c144:	681c      	ldr	r4, [r3, #0]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	6053      	str	r3, [r2, #4]
 800c14a:	4421      	add	r1, r4
 800c14c:	6011      	str	r1, [r2, #0]
 800c14e:	e7da      	b.n	800c106 <_free_r+0x26>
 800c150:	d902      	bls.n	800c158 <_free_r+0x78>
 800c152:	230c      	movs	r3, #12
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	e7d6      	b.n	800c106 <_free_r+0x26>
 800c158:	6825      	ldr	r5, [r4, #0]
 800c15a:	1961      	adds	r1, r4, r5
 800c15c:	428b      	cmp	r3, r1
 800c15e:	bf04      	itt	eq
 800c160:	6819      	ldreq	r1, [r3, #0]
 800c162:	685b      	ldreq	r3, [r3, #4]
 800c164:	6063      	str	r3, [r4, #4]
 800c166:	bf04      	itt	eq
 800c168:	1949      	addeq	r1, r1, r5
 800c16a:	6021      	streq	r1, [r4, #0]
 800c16c:	6054      	str	r4, [r2, #4]
 800c16e:	e7ca      	b.n	800c106 <_free_r+0x26>
 800c170:	b003      	add	sp, #12
 800c172:	bd30      	pop	{r4, r5, pc}
 800c174:	2000011c 	.word	0x2000011c

0800c178 <_read_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	4d07      	ldr	r5, [pc, #28]	; (800c198 <_read_r+0x20>)
 800c17c:	4604      	mov	r4, r0
 800c17e:	4608      	mov	r0, r1
 800c180:	4611      	mov	r1, r2
 800c182:	2200      	movs	r2, #0
 800c184:	602a      	str	r2, [r5, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	f7fc fba8 	bl	80088dc <_read>
 800c18c:	1c43      	adds	r3, r0, #1
 800c18e:	d102      	bne.n	800c196 <_read_r+0x1e>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	b103      	cbz	r3, 800c196 <_read_r+0x1e>
 800c194:	6023      	str	r3, [r4, #0]
 800c196:	bd38      	pop	{r3, r4, r5, pc}
 800c198:	20000124 	.word	0x20000124

0800c19c <_fstat_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	4d07      	ldr	r5, [pc, #28]	; (800c1bc <_fstat_r+0x20>)
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	4611      	mov	r1, r2
 800c1a8:	602b      	str	r3, [r5, #0]
 800c1aa:	f7fc fbdc 	bl	8008966 <_fstat>
 800c1ae:	1c43      	adds	r3, r0, #1
 800c1b0:	d102      	bne.n	800c1b8 <_fstat_r+0x1c>
 800c1b2:	682b      	ldr	r3, [r5, #0]
 800c1b4:	b103      	cbz	r3, 800c1b8 <_fstat_r+0x1c>
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20000124 	.word	0x20000124

0800c1c0 <_isatty_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4d06      	ldr	r5, [pc, #24]	; (800c1dc <_isatty_r+0x1c>)
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	602b      	str	r3, [r5, #0]
 800c1cc:	f7fc fbdb 	bl	8008986 <_isatty>
 800c1d0:	1c43      	adds	r3, r0, #1
 800c1d2:	d102      	bne.n	800c1da <_isatty_r+0x1a>
 800c1d4:	682b      	ldr	r3, [r5, #0]
 800c1d6:	b103      	cbz	r3, 800c1da <_isatty_r+0x1a>
 800c1d8:	6023      	str	r3, [r4, #0]
 800c1da:	bd38      	pop	{r3, r4, r5, pc}
 800c1dc:	20000124 	.word	0x20000124

0800c1e0 <_init>:
 800c1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e2:	bf00      	nop
 800c1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1e6:	bc08      	pop	{r3}
 800c1e8:	469e      	mov	lr, r3
 800c1ea:	4770      	bx	lr

0800c1ec <_fini>:
 800c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ee:	bf00      	nop
 800c1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1f2:	bc08      	pop	{r3}
 800c1f4:	469e      	mov	lr, r3
 800c1f6:	4770      	bx	lr
